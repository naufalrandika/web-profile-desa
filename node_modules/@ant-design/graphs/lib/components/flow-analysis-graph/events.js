"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bindEvents = void 0;
var constants_1 = require("../../constants");
var utils_1 = require("../../utils");
var bindEvents = function (params) {
    var graph = params.graph, level = params.level, asyncData = params.asyncData, fetchLoading = params.fetchLoading;
    var changeData = function (data, eventData) {
        if (eventData)
            graph.set('eventData', new utils_1.EventData(eventData));
        graph.changeData(data);
        if (graph.get('fitCenter')) {
            graph.fitCenter();
        }
    };
    var onClick = function (e) { return __awaiter(void 0, void 0, void 0, function () {
        var controlData, item, model_1, nodeId_1, collapsed_1, _a, _b, fullEdges_1, fullNodes, updateItems_1, updateIds_1, allTargets_1, getLinkedId_1, _c, currentNodes, currentEdges, concatNodes, currentData, _d, asnycNodes_1, asyncEdges_1, getDataByEvent, updateNodeTarget_1;
        var _e, _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    controlData = graph.get('eventData').getData();
                    if (!((_e = e.target.get('name')) === null || _e === void 0 ? void 0 : _e.startsWith('collapse-icon'))) return [3 /*break*/, 5];
                    item = e.item;
                    model_1 = item.getModel();
                    nodeId_1 = model_1.id, collapsed_1 = model_1.collapsed;
                    if (!(0, utils_1.isType)(collapsed_1, 'Boolean')) {
                        // @ts-ignore
                        collapsed_1 = (_f = item._cfg.group
                            .getChildren()
                            .find(function (t) { return t.get('name') === 'main-box'; })) === null || _f === void 0 ? void 0 : _f.attr('defaultCollapsed');
                    }
                    _a = controlData !== null && controlData !== void 0 ? controlData : {}, _b = _a.edges, fullEdges_1 = _b === void 0 ? [] : _b, fullNodes = _a.nodes;
                    updateItems_1 = [];
                    updateIds_1 = [];
                    allTargets_1 = [];
                    getLinkedId_1 = function (currentId) {
                        fullEdges_1.forEach(function (edge) {
                            var source = edge.source, target = edge.target;
                            if (source === currentId && !allTargets_1.includes(target)) {
                                allTargets_1.push(target);
                                getLinkedId_1(target);
                            }
                        });
                    };
                    getLinkedId_1(nodeId_1);
                    // 避免成环的情况
                    allTargets_1 = allTargets_1.filter(function (t) { return t !== nodeId_1; });
                    if (!!collapsed_1) return [3 /*break*/, 1];
                    // collapse
                    graph.findAll('node', function (node) { return allTargets_1.includes(node.get('id')); }).forEach(function (node) { return graph.hideItem(node); });
                    fullNodes.forEach(function (node) {
                        var _a = node.collapsedLevel, collapsedLevel = _a === void 0 ? 0 : _a, id = node.id;
                        if (allTargets_1.includes(id)) {
                            node.collapsedLevel = collapsedLevel + 1;
                        }
                    });
                    return [3 /*break*/, 4];
                case 1:
                    _c = graph.get('data'), currentNodes = _c.nodes, currentEdges = _c.edges;
                    if (!allTargets_1.length) return [3 /*break*/, 2];
                    // 已经展开过
                    if (graph.findById(allTargets_1[0])) {
                        allTargets_1.forEach(function (id) {
                            var n = graph.findById(id);
                            if (n) {
                                var collapsedLevel = n.getModel().collapsedLevel;
                                if (!collapsedLevel || collapsedLevel < 2)
                                    graph.showItem(n);
                            }
                        });
                        fullNodes.forEach(function (node) {
                            var _a = node.collapsedLevel, collapsedLevel = _a === void 0 ? 0 : _a, id = node.id;
                            if (allTargets_1.includes(id)) {
                                node.collapsedLevel = collapsedLevel - 1;
                            }
                        });
                    }
                    else {
                        concatNodes = void 0;
                        if (level) {
                            concatNodes = fullNodes.filter(function (n) {
                                return allTargets_1.includes(n.id) && n["".concat(constants_1.prefix, "_level")] === model_1["".concat(constants_1.prefix, "_level")] + 1;
                            });
                            allTargets_1 = concatNodes.map(function (n) { return n.id; });
                        }
                        currentData = {
                            nodes: currentNodes
                                .map(function (n) {
                                if (n.id === nodeId_1)
                                    n["".concat(constants_1.prefix, "_children")] = allTargets_1;
                                return n;
                            })
                                .concat(concatNodes),
                            edges: currentEdges.concat(fullEdges_1.filter(function (e) { return e.source === nodeId_1; })),
                        };
                        changeData(currentData);
                    }
                    return [3 /*break*/, 4];
                case 2:
                    if (!asyncData) return [3 /*break*/, 4];
                    (0, utils_1.createFetchLoading)(item.getModel(), fetchLoading);
                    return [4 /*yield*/, asyncData(item.getModel())];
                case 3:
                    _d = _g.sent(), asnycNodes_1 = _d.nodes, asyncEdges_1 = _d.edges;
                    // modify current node collapsed status
                    graph.updateItem(item, {
                        collapsed: false,
                    });
                    graph.refreshItem(item);
                    (0, utils_1.closeFetchLoading)();
                    getDataByEvent = function (nodes, edges) {
                        return {
                            nodes: nodes
                                .map(function (n) {
                                if (n.id === nodeId_1)
                                    n["".concat(constants_1.prefix, "_children")] = asnycNodes_1.map(function (n) { return n.id; });
                                return n;
                            })
                                .concat(asnycNodes_1),
                            edges: edges.concat((asyncEdges_1 === null || asyncEdges_1 === void 0 ? void 0 : asyncEdges_1.length) ? asyncEdges_1 : asnycNodes_1.map(function (t) { return ({ source: nodeId_1, target: t.id }); })),
                        };
                    };
                    changeData(getDataByEvent(currentNodes, currentEdges), getDataByEvent(fullNodes, fullEdges_1));
                    graph.emit(constants_1.MARKER_CLICK, e, {
                        type: 'fetch',
                        collapsed: true,
                    });
                    return [2 /*return*/];
                case 4:
                    updateNodeTarget_1 = fullEdges_1.find(function (edge) { return edge.source === nodeId_1; }).target;
                    fullEdges_1.forEach(function (edge) {
                        var source = edge.source, target = edge.target;
                        if (target === updateNodeTarget_1) {
                            updateIds_1.push(source);
                        }
                    });
                    Array.from(new Set(updateIds_1)).forEach(function (id) {
                        updateItems_1.push(graph.find('node', function (node) { return node.get('id') === id; }));
                    });
                    updateItems_1.forEach(function (nodeItem) {
                        graph.updateItem(nodeItem, {
                            collapsed: !collapsed_1,
                        });
                        graph.refreshItem(nodeItem);
                    });
                    graph.emit(constants_1.MARKER_CLICK, e, {
                        type: 'collapse',
                        collapsed: !!collapsed_1,
                    });
                    _g.label = 5;
                case 5: return [2 /*return*/];
            }
        });
    }); };
    graph.on('node:click', function (e) {
        onClick(e);
    });
};
exports.bindEvents = bindEvents;

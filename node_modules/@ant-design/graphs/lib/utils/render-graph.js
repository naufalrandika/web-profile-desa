"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderGraph = exports.getRenderData = void 0;
var event_data_1 = __importDefault(require("./event-data"));
var deep_clone_1 = require("./deep-clone");
var _1 = require("./");
var async_events_1 = require("./async-events");
var isFlowData = function (data) { return (data === null || data === void 0 ? void 0 : data.nodes) instanceof Array && (data === null || data === void 0 ? void 0 : data.edges) instanceof Array; };
var getRenderData = function (data, level) {
    var originData = (0, deep_clone_1.deepClone)(data);
    var tagData = originData;
    if (level) {
        if (isFlowData(data)) {
            tagData = (0, _1.setFlowTag)(data, level);
            originData = (0, _1.getFlowLevelData)(tagData, level);
        }
        else {
            // is tree data
            tagData = (0, _1.setTreeTag)(data);
            originData = (0, _1.getTreeLevelData)(tagData, level);
        }
    }
    return [originData, tagData];
};
exports.getRenderData = getRenderData;
var renderGraph = function (graph, data, level) {
    var _a = (0, exports.getRenderData)(data, level), originData = _a[0], tagData = _a[1];
    graph.data(originData);
    graph.set('eventData', new event_data_1.default(tagData));
    graph.render();
    // 关闭局部刷新，各种 bug
    graph.get('canvas').set('localRefresh', false);
    (0, async_events_1.runAsyncEvent)(graph.get('id'));
};
exports.renderGraph = renderGraph;

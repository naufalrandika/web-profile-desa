import React, { Component } from 'react';
import type { Props } from './types';
export default class ConversionDagreGraph extends Component<Props, any> {
    private container;
    private graph;
    private shouldCacheZoomAndTranslate;
    private cacheData;
    private resizeObserver;
    static defaultProps: {
        data: any;
        layerOrder: any[];
        segmLayer: string;
        ratioMethod: string;
        layout: {
            rankdir: string;
        };
    };
    constructor(props: Props);
    componentDidMount(): void;
    static getDerivedStateFromProps(props: any, state: any): {
        graphData: import("./types").ConvGraphData;
    };
    componentDidUpdate(prevProps: any): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    componentWillUnmount(): void;
    registerGraphRelative: () => void;
    getGraphShallowDiff: (data?: {
        nodes: any[];
        edges: any[];
    }, prevData?: {
        nodes: any[];
        edges: any[];
    }) => boolean;
    newGraph: () => void;
    renderGraph: () => void;
    addEventListener: () => void;
    removeEventListener: () => void;
    getLayoutParams: (forceLayout?: boolean) => {
        type: string;
    } | {
        type: string;
        rankdir: import("./types").Rankdir;
        ranksep: number;
        align: any;
        nodesep: number;
    };
    handleAfterLayout: () => void;
    handleCacheGraph: () => void;
    setCacheGraph: () => void;
    handleMouseDown: (event: any) => void;
    render(): React.ReactNode;
}

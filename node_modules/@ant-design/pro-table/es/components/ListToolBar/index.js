import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import "antd/es/space/style";
import _Space from "antd/es/space";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";
import "antd/es/input/style";
import _Input from "antd/es/input";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import "antd/es/tabs/style";
import _Tabs from "antd/es/tabs";
import "antd/es/tooltip/style";
import _Tooltip from "antd/es/tooltip";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useIntl } from '@ant-design/pro-provider';
import { LabelIconTip } from '@ant-design/pro-utils';
import classNames from 'classnames';
import React, { useContext, useMemo } from 'react';
import useAntdMediaQuery from 'use-media-antd-query';
import HeaderMenu from './HeaderMenu';
import './index.less';
/**
 * 获取配置区域 DOM Item
 *
 * @param setting 配置项
 */

function getSettingItem(setting) {
  if ( /*#__PURE__*/React.isValidElement(setting)) {
    return setting;
  }

  if (setting) {
    var settingConfig = setting;
    var icon = settingConfig.icon,
        tooltip = settingConfig.tooltip,
        _onClick = settingConfig.onClick,
        key = settingConfig.key;

    if (icon && tooltip) {
      return _jsx(_Tooltip, {
        title: tooltip,
        children: _jsx("span", {
          onClick: function onClick() {
            if (_onClick) {
              _onClick(key);
            }
          },
          children: icon
        }, key)
      });
    }

    return icon;
  }

  return null;
}

var ListToolBarTabBar = function ListToolBarTabBar(_ref) {
  var prefixCls = _ref.prefixCls,
      _ref$tabs = _ref.tabs,
      tabs = _ref$tabs === void 0 ? {} : _ref$tabs,
      multipleLine = _ref.multipleLine,
      filtersNode = _ref.filtersNode;
  if (!multipleLine) return null;
  return _jsx("div", {
    className: "".concat(prefixCls, "-extra-line"),
    children: tabs.items && tabs.items.length ? _jsx(_Tabs, {
      activeKey: tabs.activeKey,
      onChange: tabs.onChange,
      tabBarExtraContent: filtersNode,
      children: tabs.items.map(function (tab, index) {
        return _jsx(_Tabs.TabPane, _objectSpread({}, tab), tab.key || index);
      })
    }) : filtersNode
  });
};

var ListToolBar = function ListToolBar(_ref2) {
  var customizePrefixCls = _ref2.prefixCls,
      title = _ref2.title,
      subTitle = _ref2.subTitle,
      tooltip = _ref2.tooltip,
      className = _ref2.className,
      style = _ref2.style,
      search = _ref2.search,
      _onSearch = _ref2.onSearch,
      _ref2$multipleLine = _ref2.multipleLine,
      multipleLine = _ref2$multipleLine === void 0 ? false : _ref2$multipleLine,
      filter = _ref2.filter,
      _ref2$actions = _ref2.actions,
      actions = _ref2$actions === void 0 ? [] : _ref2$actions,
      _ref2$settings = _ref2.settings,
      settings = _ref2$settings === void 0 ? [] : _ref2$settings,
      _ref2$tabs = _ref2.tabs,
      tabs = _ref2$tabs === void 0 ? {} : _ref2$tabs,
      menu = _ref2.menu;
  var intl = useIntl();
  var colSize = useAntdMediaQuery();
  var isMobile = colSize === 'sm' || colSize === 'xs';
  var placeholder = intl.getMessage('tableForm.inputPlaceholder', '请输入');
  /**
   * 获取搜索栏 DOM
   *
   * @param search 搜索框相关配置
   */

  var searchNode = useMemo(function () {
    if (!search) {
      return null;
    }

    if ( /*#__PURE__*/React.isValidElement(search)) {
      return search;
    }

    return _jsx(_Input.Search, _objectSpread(_objectSpread({
      style: {
        width: 200
      },
      placeholder: placeholder
    }, search), {}, {
      onSearch: function onSearch() {
        var _search$onSearch;

        for (var _len = arguments.length, restParams = new Array(_len), _key = 0; _key < _len; _key++) {
          restParams[_key] = arguments[_key];
        }

        _onSearch === null || _onSearch === void 0 ? void 0 : _onSearch(restParams === null || restParams === void 0 ? void 0 : restParams[0]);
        (_search$onSearch = search.onSearch) === null || _search$onSearch === void 0 ? void 0 : _search$onSearch.call.apply(_search$onSearch, [search].concat(restParams));
      }
    }));
  }, [placeholder, _onSearch, search]);

  var _useContext = useContext(_ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = getPrefixCls('pro-table-list-toolbar', customizePrefixCls);
  /** 轻量筛选组件 */

  var filtersNode = useMemo(function () {
    if (filter) return _jsx("div", {
      className: "".concat(prefixCls, "-filter"),
      children: filter
    });
    return null;
  }, [filter, prefixCls]);
  /** 有没有 title，需要结合多个场景判断 */

  var hasTitle = useMemo(function () {
    return menu || title || subTitle || tooltip;
  }, [menu, subTitle, title, tooltip]);
  /** 没有 key 的时候帮忙加一下 key 不加的话很烦人 */

  var actionDom = useMemo(function () {
    if (!Array.isArray(actions)) {
      return actions;
    }

    if (actions.length < 1) {
      return null;
    }

    return _jsx(_Space, {
      align: "center",
      children: actions.map(function (action, index) {
        if (! /*#__PURE__*/React.isValidElement(action)) {
          // eslint-disable-next-line react/no-array-index-key
          return _jsx(React.Fragment, {
            children: action
          }, index);
        }

        return /*#__PURE__*/React.cloneElement(action, _objectSpread({
          // eslint-disable-next-line react/no-array-index-key
          key: index
        }, action === null || action === void 0 ? void 0 : action.props));
      })
    });
  }, [actions]);
  var hasRight = useMemo(function () {
    return hasTitle && searchNode || !multipleLine && filtersNode || actionDom || (settings === null || settings === void 0 ? void 0 : settings.length);
  }, [actionDom, filtersNode, hasTitle, multipleLine, searchNode, settings === null || settings === void 0 ? void 0 : settings.length]);
  var hasLeft = useMemo(function () {
    return tooltip || title || subTitle || menu || !hasTitle && searchNode;
  }, [hasTitle, menu, searchNode, subTitle, title, tooltip]);
  var leftTitleDom = useMemo(function () {
    // 保留dom是为了占位，不然 right 就变到左边了
    if (!hasLeft && hasRight) {
      return _jsx("div", {
        className: "".concat(prefixCls, "-left")
      });
    } // 减少 space 的dom，渲染的时候能节省点性能


    if (!menu && (hasTitle || !searchNode)) {
      return _jsx("div", {
        className: "".concat(prefixCls, "-left"),
        children: _jsx("div", {
          className: "".concat(prefixCls, "-title"),
          children: _jsx(LabelIconTip, {
            tooltip: tooltip,
            label: title,
            subTitle: subTitle
          })
        })
      });
    }

    return _jsxs(_Space, {
      className: "".concat(prefixCls, "-left"),
      children: [hasTitle && !menu && _jsx("div", {
        className: "".concat(prefixCls, "-title"),
        children: _jsx(LabelIconTip, {
          tooltip: tooltip,
          label: title,
          subTitle: subTitle
        })
      }), menu && _jsx(HeaderMenu, _objectSpread(_objectSpread({}, menu), {}, {
        prefixCls: prefixCls
      })), !hasTitle && searchNode ? _jsx("div", {
        className: "".concat(prefixCls, "-search"),
        children: searchNode
      }) : null]
    });
  }, [hasLeft, hasRight, hasTitle, menu, prefixCls, searchNode, subTitle, title, tooltip]);
  var rightTitleDom = useMemo(function () {
    if (!hasRight) return null;
    return _jsxs(_Space, {
      className: "".concat(prefixCls, "-right"),
      direction: isMobile ? 'vertical' : 'horizontal',
      size: 16,
      align: isMobile ? 'end' : 'center',
      children: [hasTitle && searchNode ? _jsx("div", {
        className: "".concat(prefixCls, "-search"),
        children: searchNode
      }) : null, !multipleLine ? filtersNode : null, actionDom, (settings === null || settings === void 0 ? void 0 : settings.length) ? _jsx(_Space, {
        size: 12,
        align: "center",
        className: "".concat(prefixCls, "-setting-items"),
        children: settings.map(function (setting, index) {
          var settingItem = getSettingItem(setting);
          return (// eslint-disable-next-line react/no-array-index-key
            _jsx("div", {
              className: "".concat(prefixCls, "-setting-item"),
              children: settingItem
            }, index)
          );
        })
      }) : null]
    });
  }, [actionDom, isMobile, filtersNode, hasRight, hasTitle, multipleLine, prefixCls, searchNode, settings]);
  var titleNode = useMemo(function () {
    if (!hasRight && !hasLeft) return null;
    var containerClassName = classNames("".concat(prefixCls, "-container"), _defineProperty({}, "".concat(prefixCls, "-container-mobile"), isMobile));
    return _jsxs("div", {
      className: containerClassName,
      children: [leftTitleDom, rightTitleDom]
    });
  }, [hasLeft, hasRight, isMobile, leftTitleDom, prefixCls, rightTitleDom]);
  return _jsxs("div", {
    style: style,
    className: classNames("".concat(prefixCls), className),
    children: [titleNode, _jsx(ListToolBarTabBar, {
      filtersNode: filtersNode,
      prefixCls: prefixCls,
      tabs: tabs,
      multipleLine: multipleLine
    })]
  });
};

export default ListToolBar;
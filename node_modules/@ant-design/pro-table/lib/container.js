"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.useContainer = useContainer;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _useMergedState5 = _interopRequireDefault(require("rc-util/lib/hooks/useMergedState"));

var _warning = require("rc-util/lib/warning");

var _react = require("react");

var _unstatedNext = require("unstated-next");

var _utils = require("./utils");

function useContainer() {
  var _props$columnsState3, _props$columnsState4, _props$columnsState8, _props$columnsState9;

  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var actionRef = (0, _react.useRef)();
  var rootDomRef = (0, _react.useRef)(null);
  /** 父 form item 的 name */

  var prefixNameRef = (0, _react.useRef)();
  /** 自己 props 的引用 */

  var propsRef = (0, _react.useRef)(); // 共享状态比较难，就放到这里了

  var _useState = (0, _react.useState)(''),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      keyWords = _useState2[0],
      _setKeyWords = _useState2[1]; // 用于排序的数组


  var sortKeyColumns = (0, _react.useRef)([]);

  var _useMergedState = (0, _useMergedState5.default)(function () {
    return props.size || props.defaultSize || 'middle';
  }, {
    value: props.size,
    onChange: props.onSizeChange
  }),
      _useMergedState2 = (0, _slicedToArray2.default)(_useMergedState, 2),
      tableSize = _useMergedState2[0],
      setTableSize = _useMergedState2[1];
  /** 默认全选中 */


  var defaultColumnKeyMap = (0, _react.useMemo)(function () {
    var _props$columns;

    var columnKeyMap = {};
    (_props$columns = props.columns) === null || _props$columns === void 0 ? void 0 : _props$columns.forEach(function (_ref, index) {
      var key = _ref.key,
          dataIndex = _ref.dataIndex,
          fixed = _ref.fixed,
          disable = _ref.disable;
      var columnKey = (0, _utils.genColumnKey)(key !== null && key !== void 0 ? key : dataIndex, index);

      if (columnKey) {
        columnKeyMap[columnKey] = {
          show: true,
          fixed: fixed,
          disable: disable
        };
      }
    });
    return columnKeyMap;
  }, [props.columns]);

  var _useMergedState3 = (0, _useMergedState5.default)(function () {
    var _props$columnsState, _props$columnsState2;

    var _ref2 = props.columnsState || {},
        persistenceType = _ref2.persistenceType,
        persistenceKey = _ref2.persistenceKey;

    if (persistenceKey && persistenceType && typeof window !== 'undefined') {
      /** 从持久化中读取数据 */
      var storage = window[persistenceType];

      try {
        var storageValue = storage === null || storage === void 0 ? void 0 : storage.getItem(persistenceKey);

        if (storageValue) {
          return JSON.parse(storageValue);
        }
      } catch (error) {
        console.warn(error);
      }
    }

    return props.columnsStateMap || ((_props$columnsState = props.columnsState) === null || _props$columnsState === void 0 ? void 0 : _props$columnsState.value) || ((_props$columnsState2 = props.columnsState) === null || _props$columnsState2 === void 0 ? void 0 : _props$columnsState2.defaultValue) || defaultColumnKeyMap;
  }, {
    value: ((_props$columnsState3 = props.columnsState) === null || _props$columnsState3 === void 0 ? void 0 : _props$columnsState3.value) || props.columnsStateMap,
    onChange: ((_props$columnsState4 = props.columnsState) === null || _props$columnsState4 === void 0 ? void 0 : _props$columnsState4.onChange) || props.onColumnsStateChange
  }),
      _useMergedState4 = (0, _slicedToArray2.default)(_useMergedState3, 2),
      columnsMap = _useMergedState4[0],
      setColumnsMap = _useMergedState4[1];
  /**  配置或列更改时对columnsMap重新赋值 */


  (0, _react.useLayoutEffect)(function () {
    var _ref3 = props.columnsState || {},
        persistenceType = _ref3.persistenceType,
        persistenceKey = _ref3.persistenceKey;

    if (persistenceKey && persistenceType && typeof window !== 'undefined') {
      /** 从持久化中读取数据 */
      var storage = window[persistenceType];

      try {
        var storageValue = storage === null || storage === void 0 ? void 0 : storage.getItem(persistenceKey);

        if (storageValue) {
          setColumnsMap(JSON.parse(storageValue));
        } else {
          setColumnsMap(defaultColumnKeyMap);
        }
      } catch (error) {
        console.warn(error);
      }
    }
  }, [props.columnsState, defaultColumnKeyMap, setColumnsMap]);
  (0, _warning.noteOnce)(!props.columnsStateMap, 'columnsStateMap已经废弃，请使用 columnsState.value 替换');
  (0, _warning.noteOnce)(!props.columnsStateMap, 'columnsStateMap has been discarded, please use columnSstate.value replacement');
  /** 清空一下当前的 key */

  var clearPersistenceStorage = (0, _react.useCallback)(function () {
    var _ref4 = props.columnsState || {},
        persistenceType = _ref4.persistenceType,
        persistenceKey = _ref4.persistenceKey;

    if (!persistenceKey || !persistenceType || typeof window === 'undefined') return;
    /** 给持久化中设置数据 */

    var storage = window[persistenceType];

    try {
      storage === null || storage === void 0 ? void 0 : storage.removeItem(persistenceKey);
    } catch (error) {
      console.error(error);
    }
  }, [props.columnsState]);
  (0, _react.useEffect)(function () {
    var _props$columnsState5, _props$columnsState6;

    if (!((_props$columnsState5 = props.columnsState) === null || _props$columnsState5 === void 0 ? void 0 : _props$columnsState5.persistenceKey) || !((_props$columnsState6 = props.columnsState) === null || _props$columnsState6 === void 0 ? void 0 : _props$columnsState6.persistenceType)) {
      return;
    }

    if (typeof window === 'undefined') return;
    /** 给持久化中设置数据 */

    var _props$columnsState7 = props.columnsState,
        persistenceType = _props$columnsState7.persistenceType,
        persistenceKey = _props$columnsState7.persistenceKey;
    var storage = window[persistenceType];

    try {
      storage === null || storage === void 0 ? void 0 : storage.setItem(persistenceKey, JSON.stringify(columnsMap));
    } catch (error) {
      console.error(error);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [(_props$columnsState8 = props.columnsState) === null || _props$columnsState8 === void 0 ? void 0 : _props$columnsState8.persistenceKey, columnsMap, (_props$columnsState9 = props.columnsState) === null || _props$columnsState9 === void 0 ? void 0 : _props$columnsState9.persistenceType]);
  var renderValue = {
    action: actionRef.current,
    setAction: function setAction(newAction) {
      actionRef.current = newAction;
    },
    sortKeyColumns: sortKeyColumns.current,
    setSortKeyColumns: function setSortKeyColumns(keys) {
      sortKeyColumns.current = keys;
    },
    propsRef: propsRef,
    columnsMap: columnsMap,
    keyWords: keyWords,
    setKeyWords: function setKeyWords(k) {
      return _setKeyWords(k);
    },
    setTableSize: setTableSize,
    tableSize: tableSize,
    prefixName: prefixNameRef.current,
    setPrefixName: function setPrefixName(name) {
      prefixNameRef.current = name;
    },
    setColumnsMap: setColumnsMap,
    columns: props.columns,
    rootDomRef: rootDomRef,
    clearPersistenceStorage: clearPersistenceStorage
  };
  Object.defineProperty(renderValue, 'prefixName', {
    get: function get() {
      return prefixNameRef.current;
    }
  });
  Object.defineProperty(renderValue, 'sortKeyColumns', {
    get: function get() {
      return sortKeyColumns.current;
    }
  });
  Object.defineProperty(renderValue, 'action', {
    get: function get() {
      return actionRef.current;
    }
  });
  return renderValue;
}

var Container = (0, _unstatedNext.createContainer)(useContainer);
var _default = Container;
exports.default = _default;
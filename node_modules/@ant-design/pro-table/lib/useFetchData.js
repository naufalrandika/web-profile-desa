"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _regeneratorRuntime2 = _interopRequireDefault(require("@babel/runtime/helpers/regeneratorRuntime"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _proUtils = require("@ant-design/pro-utils");

var _react = require("react");

var _index = require("./utils/index");

var _excluded = ["data", "success", "total"];

/**
 * 组合用户的配置和默认值
 *
 * @param param0
 */
var mergeOptionAndPageInfo = function mergeOptionAndPageInfo(_ref) {
  var pageInfo = _ref.pageInfo;

  if (pageInfo) {
    var current = pageInfo.current,
        defaultCurrent = pageInfo.defaultCurrent,
        pageSize = pageInfo.pageSize,
        defaultPageSize = pageInfo.defaultPageSize;
    return {
      current: current || defaultCurrent || 1,
      total: 0,
      pageSize: pageSize || defaultPageSize || 20
    };
  }

  return {
    current: 1,
    total: 0,
    pageSize: 20
  };
};

var useFetchData = function useFetchData(getData, defaultData, options) {
  var umountRef = (0, _react.useRef)(false);

  var _ref2 = options || {},
      onLoad = _ref2.onLoad,
      manual = _ref2.manual,
      polling = _ref2.polling,
      onRequestError = _ref2.onRequestError,
      _ref2$debounceTime = _ref2.debounceTime,
      debounceTime = _ref2$debounceTime === void 0 ? 20 : _ref2$debounceTime;
  /** 是否首次加载的指示器 */


  var manualRequestRef = (0, _react.useRef)(manual);
  /** 轮询的setTime ID 存储 */

  var pollingSetTimeRef = (0, _react.useRef)();

  var _useMountMergeState = (0, _proUtils.useMountMergeState)(defaultData, {
    value: options === null || options === void 0 ? void 0 : options.dataSource,
    onChange: options === null || options === void 0 ? void 0 : options.onDataSourceChange
  }),
      _useMountMergeState2 = (0, _slicedToArray2.default)(_useMountMergeState, 2),
      list = _useMountMergeState2[0],
      setList = _useMountMergeState2[1];

  var _useMountMergeState3 = (0, _proUtils.useMountMergeState)(false, {
    value: options === null || options === void 0 ? void 0 : options.loading,
    onChange: options === null || options === void 0 ? void 0 : options.onLoadingChange
  }),
      _useMountMergeState4 = (0, _slicedToArray2.default)(_useMountMergeState3, 2),
      tableLoading = _useMountMergeState4[0],
      setTableLoading = _useMountMergeState4[1];

  var requesting = (0, _react.useRef)(false);

  var _useMountMergeState5 = (0, _proUtils.useMountMergeState)(function () {
    return mergeOptionAndPageInfo(options);
  }, {
    onChange: options === null || options === void 0 ? void 0 : options.onPageInfoChange
  }),
      _useMountMergeState6 = (0, _slicedToArray2.default)(_useMountMergeState5, 2),
      pageInfo = _useMountMergeState6[0],
      setPageInfoState = _useMountMergeState6[1];

  var _setPageInfo = (0, _proUtils.useRefFunction)(function (changePageInfo) {
    if (changePageInfo.current !== pageInfo.current || changePageInfo.pageSize !== pageInfo.pageSize || changePageInfo.total !== pageInfo.total) {
      setPageInfoState(changePageInfo);
    }
  });

  var _useMountMergeState7 = (0, _proUtils.useMountMergeState)(false),
      _useMountMergeState8 = (0, _slicedToArray2.default)(_useMountMergeState7, 2),
      pollingLoading = _useMountMergeState8[0],
      setPollingLoading = _useMountMergeState8[1]; // Batching update  https://github.com/facebook/react/issues/14259


  var setDataAndLoading = function setDataAndLoading(newData, dataTotal) {
    setList(newData);

    if ((pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.total) !== dataTotal) {
      _setPageInfo((0, _objectSpread2.default)((0, _objectSpread2.default)({}, pageInfo), {}, {
        total: dataTotal || newData.length
      }));
    }
  }; // pre state


  var prePage = (0, _proUtils.usePrevious)(pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.current);
  var prePageSize = (0, _proUtils.usePrevious)(pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.pageSize);
  var prePolling = (0, _proUtils.usePrevious)(polling);

  var _ref3 = options || {},
      _ref3$effects = _ref3.effects,
      effects = _ref3$effects === void 0 ? [] : _ref3$effects;
  /**
   * 不这样做会导致状态不更新
   *
   * https://github.com/ant-design/pro-components/issues/4390
   */


  var requestFinally = (0, _proUtils.useRefFunction)(function () {
    if ((0, _typeof2.default)(tableLoading) === 'object') {
      setTableLoading((0, _objectSpread2.default)((0, _objectSpread2.default)({}, tableLoading), {}, {
        spinning: false
      }));
    } else {
      setTableLoading(false);
    }

    setPollingLoading(false);
  });
  /** 请求数据 */

  var fetchList = /*#__PURE__*/function () {
    var _ref4 = (0, _asyncToGenerator2.default)( /*#__PURE__*/(0, _regeneratorRuntime2.default)().mark(function _callee(isPolling) {
      var _ref5, pageSize, current, pageParams, _ref6, _ref6$data, data, success, _ref6$total, total, rest, responseData;

      return (0, _regeneratorRuntime2.default)().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(tableLoading && typeof tableLoading === 'boolean' || requesting.current || !getData)) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return", []);

            case 2:
              if (!manualRequestRef.current) {
                _context.next = 5;
                break;
              }

              manualRequestRef.current = false;
              return _context.abrupt("return", []);

            case 5:
              if (!isPolling) {
                if ((0, _typeof2.default)(tableLoading) === 'object') {
                  setTableLoading((0, _objectSpread2.default)((0, _objectSpread2.default)({}, tableLoading), {}, {
                    spinning: true
                  }));
                } else {
                  setTableLoading(true);
                }
              } else {
                setPollingLoading(true);
              }

              requesting.current = true;
              _ref5 = pageInfo || {}, pageSize = _ref5.pageSize, current = _ref5.current;
              _context.prev = 8;
              pageParams = (options === null || options === void 0 ? void 0 : options.pageInfo) !== false ? {
                current: current,
                pageSize: pageSize
              } : undefined;
              _context.next = 12;
              return getData(pageParams);

            case 12:
              _context.t0 = _context.sent;

              if (_context.t0) {
                _context.next = 15;
                break;
              }

              _context.t0 = {};

            case 15:
              _ref6 = _context.t0;
              _ref6$data = _ref6.data;
              data = _ref6$data === void 0 ? [] : _ref6$data;
              success = _ref6.success;
              _ref6$total = _ref6.total;
              total = _ref6$total === void 0 ? 0 : _ref6$total;
              rest = (0, _objectWithoutProperties2.default)(_ref6, _excluded);

              if (!(success === false)) {
                _context.next = 24;
                break;
              }

              return _context.abrupt("return", []);

            case 24:
              responseData = (0, _index.postDataPipeline)(data, [options.postData].filter(function (item) {
                return item;
              }));
              setDataAndLoading(responseData, total);
              onLoad === null || onLoad === void 0 ? void 0 : onLoad(responseData, rest);
              return _context.abrupt("return", responseData);

            case 30:
              _context.prev = 30;
              _context.t1 = _context["catch"](8);

              if (!(onRequestError === undefined)) {
                _context.next = 34;
                break;
              }

              throw new Error(_context.t1);

            case 34:
              if (list === undefined) setList([]);
              onRequestError(_context.t1);

            case 36:
              _context.prev = 36;
              requesting.current = false;
              requestFinally();
              return _context.finish(36);

            case 40:
              return _context.abrupt("return", []);

            case 41:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[8, 30, 36, 40]]);
    }));

    return function fetchList(_x) {
      return _ref4.apply(this, arguments);
    };
  }();

  var fetchListDebounce = (0, _proUtils.useDebounceFn)( /*#__PURE__*/function () {
    var _ref7 = (0, _asyncToGenerator2.default)( /*#__PURE__*/(0, _regeneratorRuntime2.default)().mark(function _callee2(isPolling) {
      var msg, needPolling;
      return (0, _regeneratorRuntime2.default)().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (pollingSetTimeRef.current) {
                clearTimeout(pollingSetTimeRef.current);
              }

              _context2.next = 3;
              return fetchList(isPolling);

            case 3:
              msg = _context2.sent;
              // 把判断要不要轮询的逻辑放到后面来这样可以保证数据是根据当前来
              // 放到请求前面会导致数据是上一次的
              needPolling = (0, _proUtils.runFunction)(polling, msg); // 如果需要轮询，搞个一段时间后执行
              // 如果解除了挂载，删除一下

              if (needPolling && !umountRef.current) {
                pollingSetTimeRef.current = setTimeout(function () {
                  fetchListDebounce.run(needPolling); // 这里判断最小要2000ms，不然一直loading
                }, Math.max(needPolling, 2000));
              }

              return _context2.abrupt("return", msg);

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x2) {
      return _ref7.apply(this, arguments);
    };
  }(), debounceTime || 10); // 如果轮询结束了，直接销毁定时器

  (0, _react.useEffect)(function () {
    if (!polling) {
      clearTimeout(pollingSetTimeRef.current);
    }

    if (!prePolling && polling) {
      fetchListDebounce.run(true);
    }

    return function () {
      clearTimeout(pollingSetTimeRef.current);
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [polling]);
  (0, _react.useLayoutEffect)(function () {
    umountRef.current = false;
    return function () {
      umountRef.current = true;
    };
  }, []);
  /** PageIndex 改变的时候自动刷新 */

  (0, _react.useEffect)(function () {
    var _ref8 = pageInfo || {},
        current = _ref8.current,
        pageSize = _ref8.pageSize; // 如果上次的页码为空或者两次页码等于是没必要查询的
    // 如果 pageSize 发生变化是需要查询的，所以又加了 prePageSize


    if ((!prePage || prePage === current) && (!prePageSize || prePageSize === pageSize)) {
      return;
    }

    if (options.pageInfo && list && (list === null || list === void 0 ? void 0 : list.length) > pageSize || 0) {
      return;
    } // 如果 list 的长度大于 pageSize 的长度
    // 说明是一个假分页
    // (pageIndex - 1 || 1) 至少要第一页
    // 在第一页大于 10
    // 第二页也应该是大于 10


    if (current !== undefined && list && list.length <= pageSize) {
      fetchListDebounce.run(false);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.current]); // pageSize 修改后返回第一页

  (0, _react.useEffect)(function () {
    if (!prePageSize) {
      return;
    }

    fetchListDebounce.run(false); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.pageSize]);
  (0, _proUtils.useDeepCompareEffect)(function () {
    fetchListDebounce.run(false);

    if (!manual) {
      manualRequestRef.current = false;
    }

    return function () {
      fetchListDebounce.cancel();
    };
  }, [].concat((0, _toConsumableArray2.default)(effects), [manual]));
  return {
    dataSource: list,
    setDataSource: setList,
    loading: tableLoading,
    reload: function () {
      var _reload = (0, _asyncToGenerator2.default)( /*#__PURE__*/(0, _regeneratorRuntime2.default)().mark(function _callee3() {
        return (0, _regeneratorRuntime2.default)().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return fetchListDebounce.run(false);

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function reload() {
        return _reload.apply(this, arguments);
      }

      return reload;
    }(),
    pageInfo: pageInfo,
    pollingLoading: pollingLoading,
    reset: function () {
      var _reset = (0, _asyncToGenerator2.default)( /*#__PURE__*/(0, _regeneratorRuntime2.default)().mark(function _callee4() {
        var _ref9, optionPageInfo, _ref10, _ref10$defaultCurrent, defaultCurrent, _ref10$defaultPageSiz, defaultPageSize, initialPageInfo;

        return (0, _regeneratorRuntime2.default)().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _ref9 = options || {}, optionPageInfo = _ref9.pageInfo;
                _ref10 = optionPageInfo || {}, _ref10$defaultCurrent = _ref10.defaultCurrent, defaultCurrent = _ref10$defaultCurrent === void 0 ? 1 : _ref10$defaultCurrent, _ref10$defaultPageSiz = _ref10.defaultPageSize, defaultPageSize = _ref10$defaultPageSiz === void 0 ? 20 : _ref10$defaultPageSiz;
                initialPageInfo = {
                  current: defaultCurrent,
                  total: 0,
                  pageSize: defaultPageSize
                };

                _setPageInfo(initialPageInfo);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function reset() {
        return _reset.apply(this, arguments);
      }

      return reset;
    }(),
    setPageInfo: function () {
      var _setPageInfo2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/(0, _regeneratorRuntime2.default)().mark(function _callee5(info) {
        return (0, _regeneratorRuntime2.default)().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _setPageInfo((0, _objectSpread2.default)((0, _objectSpread2.default)({}, pageInfo), info));

              case 1:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function setPageInfo(_x3) {
        return _setPageInfo2.apply(this, arguments);
      }

      return setPageInfo;
    }()
  };
};

var _default = useFetchData;
exports.default = _default;
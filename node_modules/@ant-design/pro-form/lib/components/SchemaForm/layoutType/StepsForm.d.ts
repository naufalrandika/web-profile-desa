import React from 'react';
import type { ProFormGridConfig } from '../../../interface';
import type { FormSchema, ProFormPropsType } from '../typing';
declare type StepsFormProps<T, ValueType> = ProFormPropsType<T, ValueType> & Pick<FormSchema, 'steps'> & {
    layoutType: 'StepsForm';
    forceUpdate: React.Dispatch<React.SetStateAction<[]>>;
} & Pick<ProFormGridConfig, 'grid'>;
declare const StepsForm: <T, ValueType>({ steps, columns, forceUpdate, grid, ...props }: {
    layoutType: "StepsForm";
    columns: import("../typing").ProFormColumnsType<T, ValueType>[][];
} & {
    onFinish?: ((values: T) => Promise<boolean | void>) | undefined;
    current?: number | undefined;
    stepsProps?: import("antd").StepsProps | undefined;
    formProps?: import("../../..").ProFormProps<T> | undefined;
    onCurrentChange?: ((current: number) => void) | undefined;
    stepsRender?: ((steps: {
        key: string;
        title?: React.ReactNode;
    }[], defaultDom: React.ReactNode) => React.ReactNode) | undefined;
    formRef?: React.MutableRefObject<import("antd").FormInstance<any> | null | undefined> | undefined;
    formMapRef?: React.MutableRefObject<React.MutableRefObject<import("antd").FormInstance<any> | undefined>[]> | undefined;
    stepFormRender?: ((from: React.ReactNode) => React.ReactNode) | undefined;
    stepsFormRender?: ((from: React.ReactNode, submitter: React.ReactNode) => React.ReactNode) | undefined;
    submitter?: false | import("../..").SubmitterProps<{
        step: number;
        onPre: () => void;
        form?: import("antd").FormInstance<any> | undefined;
    }> | undefined;
    containerStyle?: React.CSSProperties | undefined;
} & Omit<import("antd/lib/form/context").FormProviderProps, "children"> & Pick<FormSchema<Record<string, any>, "text">, "steps"> & {
    layoutType: 'StepsForm';
    forceUpdate: React.Dispatch<React.SetStateAction<[]>>;
} & Pick<ProFormGridConfig, "grid">) => JSX.Element;
export default StepsForm;

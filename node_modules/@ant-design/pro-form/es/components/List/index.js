import "antd/es/form/style";
import _Form from "antd/es/form";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";
var _excluded = ["actionRender", "creatorButtonProps", "label", "alwaysShowItemLabel", "tooltip", "creatorRecord", "itemRender", "rules", "itemContainerRender", "fieldExtraRender", "copyIconProps", "children", "deleteIconProps", "actionRef", "style", "prefixCls", "actionGuard", "min", "max", "colProps", "rowProps", "onAfterAdd", "onAfterRemove", "isValidateList", "emptyListMessage"];
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { CopyOutlined, DeleteOutlined } from '@ant-design/icons';
import { useIntl } from '@ant-design/pro-provider';
import { ProFormContext } from '@ant-design/pro-utils';
import { noteOnce } from "rc-util/es/warning";
import React, { useContext, useEffect, useImperativeHandle, useMemo, useRef } from 'react';
import { useGridHelpers } from '../../helpers';
import './index.less';
import { ProFormListContainer } from './ListContainer';
var FormListContext = /*#__PURE__*/React.createContext({});

function ProFormList(props) {
  var actionRefs = useRef();
  var context = useContext(_ConfigProvider.ConfigContext);
  var listContext = useContext(FormListContext);
  var baseClassName = context.getPrefixCls('pro-form-list'); // Internationalization

  var intl = useIntl();

  var actionRender = props.actionRender,
      creatorButtonProps = props.creatorButtonProps,
      label = props.label,
      alwaysShowItemLabel = props.alwaysShowItemLabel,
      tooltip = props.tooltip,
      creatorRecord = props.creatorRecord,
      itemRender = props.itemRender,
      rules = props.rules,
      itemContainerRender = props.itemContainerRender,
      fieldExtraRender = props.fieldExtraRender,
      _props$copyIconProps = props.copyIconProps,
      copyIconProps = _props$copyIconProps === void 0 ? {
    Icon: CopyOutlined,
    tooltipText: intl.getMessage('copyThisLine', '复制此行')
  } : _props$copyIconProps,
      _children = props.children,
      _props$deleteIconProp = props.deleteIconProps,
      deleteIconProps = _props$deleteIconProp === void 0 ? {
    Icon: DeleteOutlined,
    tooltipText: intl.getMessage('deleteThisLine', '删除此行')
  } : _props$deleteIconProp,
      actionRef = props.actionRef,
      style = props.style,
      prefixCls = props.prefixCls,
      actionGuard = props.actionGuard,
      min = props.min,
      max = props.max,
      colProps = props.colProps,
      rowProps = props.rowProps,
      _onAfterAdd = props.onAfterAdd,
      _onAfterRemove = props.onAfterRemove,
      _props$isValidateList = props.isValidateList,
      isValidateList = _props$isValidateList === void 0 ? false : _props$isValidateList,
      _props$emptyListMessa = props.emptyListMessage,
      emptyListMessage = _props$emptyListMessa === void 0 ? '列表不能为空' : _props$emptyListMessa,
      rest = _objectWithoutProperties(props, _excluded);

  var _useGridHelpers = useGridHelpers({
    colProps: colProps,
    rowProps: rowProps
  }),
      ColWrapper = _useGridHelpers.ColWrapper,
      RowWrapper = _useGridHelpers.RowWrapper;

  var proFormContext = useContext(ProFormContext); // 处理 list 的嵌套

  var name = useMemo(function () {
    if (listContext.name === undefined) {
      return [rest.name].flat(1);
    }

    return [listContext.name, rest.name].flat(1);
  }, [listContext.name, rest.name]); // eslint-disable-next-line react-hooks/exhaustive-deps

  useImperativeHandle(actionRef, function () {
    return _objectSpread(_objectSpread({}, actionRefs.current), {}, {
      get: function get(index) {
        return proFormContext.formRef.current.getFieldValue([].concat(_toConsumableArray(name), [index]));
      },
      getList: function getList() {
        return proFormContext.formRef.current.getFieldValue(_toConsumableArray(name));
      }
    });
  }, [name, proFormContext.formRef]);
  useEffect(function () {
    noteOnce(!!proFormContext.formRef, "ProFormList \u5FC5\u987B\u8981\u653E\u5230 ProForm \u4E2D,\u5426\u5219\u4F1A\u9020\u6210\u884C\u4E3A\u5F02\u5E38\u3002");
    noteOnce(!!proFormContext.formRef, "Proformlist must be placed in ProForm, otherwise it will cause abnormal behavior.");
  }, [proFormContext.formRef]);
  if (!proFormContext.formRef) return null;
  return _jsx(ColWrapper, {
    children: _jsx("div", {
      className: baseClassName,
      style: style,
      children: _jsx(_Form.Item, _objectSpread(_objectSpread({
        label: label,
        prefixCls: prefixCls,
        tooltip: tooltip,
        style: style
      }, rest), {}, {
        name: isValidateList ? name : undefined,
        rules: isValidateList ? [{
          validator: function validator(rule, value) {
            if (!value || value.length === 0) {
              return Promise.reject(new Error(emptyListMessage));
            }

            return Promise.resolve();
          },
          required: true
        }] : undefined,
        children: _jsx(_Form.List, _objectSpread(_objectSpread({
          rules: rules
        }, rest), {}, {
          name: name,
          children: function children(fields, action, meta) {
            // 将 action 暴露给外部
            actionRefs.current = action;
            return _jsxs(RowWrapper, {
              children: [_jsx(ProFormListContainer, {
                name: name,
                originName: rest.name,
                copyIconProps: copyIconProps,
                deleteIconProps: deleteIconProps,
                formInstance: proFormContext.formRef.current,
                prefixCls: baseClassName,
                meta: meta,
                fields: fields,
                itemContainerRender: itemContainerRender,
                itemRender: itemRender,
                fieldExtraRender: fieldExtraRender,
                creatorButtonProps: creatorButtonProps,
                creatorRecord: creatorRecord,
                actionRender: actionRender,
                action: action,
                actionGuard: actionGuard,
                alwaysShowItemLabel: alwaysShowItemLabel,
                min: min,
                max: max,
                count: fields.length,
                onAfterAdd: function onAfterAdd(defaultValue, insertIndex, count) {
                  if (isValidateList) {
                    proFormContext.formRef.current.validateFields([name]);
                  }

                  _onAfterAdd === null || _onAfterAdd === void 0 ? void 0 : _onAfterAdd(defaultValue, insertIndex, count);
                },
                onAfterRemove: function onAfterRemove(index, count) {
                  if (isValidateList) {
                    if (count === 0) {
                      proFormContext.formRef.current.validateFields([name]);
                    }
                  }

                  _onAfterRemove === null || _onAfterRemove === void 0 ? void 0 : _onAfterRemove(index, count);
                },
                children: _children
              }), _jsx(_Form.ErrorList, {
                errors: meta.errors
              })]
            });
          }
        }))
      }))
    })
  });
}

export { FormListContext, ProFormList };
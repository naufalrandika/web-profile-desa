import "antd/es/form/style";
import _Form from "antd/es/form";
import "antd/es/space/style";
import _Space from "antd/es/space";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import "antd/es/button/style";
import _Button from "antd/es/button";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import "antd/es/steps/style";
import _Steps from "antd/es/steps";
import _regeneratorRuntime from "@babel/runtime/helpers/esm/regeneratorRuntime";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";
import "antd/es/col/style";
import _Col from "antd/es/col";
import "antd/es/row/style";
import _Row from "antd/es/row";
var _excluded = ["current", "onCurrentChange", "submitter", "stepsFormRender", "stepsRender", "stepFormRender", "stepsProps", "onFinish", "formProps", "containerStyle", "formRef", "formMapRef"];
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { ConfigProviderWrap, useIntl } from '@ant-design/pro-provider';
import { merge, useRefFunction } from '@ant-design/pro-utils';
import classNames from 'classnames';
import toArray from "rc-util/es/Children/toArray";
import useMergedState from "rc-util/es/hooks/useMergedState";
import React, { useCallback, useContext, useImperativeHandle, useMemo, useRef, useState } from 'react';
import './index.less';
import StepForm from './StepForm';
export var StepsFormProvide = /*#__PURE__*/React.createContext(undefined);
var StepsLayoutStrategy = {
  horizontal: function horizontal(_ref) {
    var stepsDom = _ref.stepsDom,
        formDom = _ref.formDom;
    return _jsxs(_Fragment, {
      children: [_jsx(_Row, {
        gutter: {
          xs: 8,
          sm: 16,
          md: 24
        },
        children: _jsx(_Col, {
          span: 24,
          children: stepsDom
        })
      }), _jsx(_Row, {
        gutter: {
          xs: 8,
          sm: 16,
          md: 24
        },
        children: _jsx(_Col, {
          span: 24,
          children: formDom
        })
      })]
    });
  },
  vertical: function vertical(_ref2) {
    var stepsDom = _ref2.stepsDom,
        formDom = _ref2.formDom;
    return _jsxs(_Row, {
      align: "stretch",
      wrap: true,
      gutter: {
        xs: 8,
        sm: 16,
        md: 24
      },
      children: [_jsx(_Col, {
        xxl: 4,
        xl: 6,
        lg: 7,
        md: 8,
        sm: 10,
        xs: 12,
        children: /*#__PURE__*/React.cloneElement(stepsDom, {
          style: {
            height: '100%'
          }
        })
      }), _jsx(_Col, {
        children: _jsx("div", {
          style: {
            display: 'flex',
            alignItems: 'center',
            width: '100%',
            height: '100%'
          },
          children: formDom
        })
      })]
    });
  }
};

function StepsForm(props) {
  var _useContext = useContext(_ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = getPrefixCls('pro-steps-form');

  var current = props.current,
      onCurrentChange = props.onCurrentChange,
      submitter = props.submitter,
      stepsFormRender = props.stepsFormRender,
      stepsRender = props.stepsRender,
      stepFormRender = props.stepFormRender,
      stepsProps = props.stepsProps,
      onFinish = props.onFinish,
      formProps = props.formProps,
      containerStyle = props.containerStyle,
      formRef = props.formRef,
      propsFormMapRef = props.formMapRef,
      rest = _objectWithoutProperties(props, _excluded);

  var formDataRef = useRef(new Map());
  var formMapRef = useRef(new Map());
  var formArrayRef = useRef([]);

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      formArray = _useState2[0],
      setFormArray = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      loading = _useState4[0],
      setLoading = _useState4[1];

  var intl = useIntl();
  /**
   * 受控的方式来操作表单
   */

  var _useMergedState = useMergedState(0, {
    value: props.current,
    onChange: props.onCurrentChange
  }),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      step = _useMergedState2[0],
      setStep = _useMergedState2[1];

  var layoutRender = useMemo(function () {
    return StepsLayoutStrategy[(stepsProps === null || stepsProps === void 0 ? void 0 : stepsProps.direction) || 'horizontal'];
  }, [stepsProps === null || stepsProps === void 0 ? void 0 : stepsProps.direction]);
  var lastStep = useMemo(function () {
    return step === formArray.length - 1;
  }, [formArray.length, step]);
  /**
   * 注册一个form进入，方便进行 props 的修改
   */

  var regForm = useCallback(function (name, childrenFormProps) {
    if (!formMapRef.current.has(name)) {
      setFormArray(function (oldFormArray) {
        return [].concat(_toConsumableArray(oldFormArray), [name]);
      });
    }

    formMapRef.current.set(name, childrenFormProps);
  }, []);
  /**
   * 解除挂载掉这个 form，同时步数 -1
   */

  var unRegForm = useCallback(function (name) {
    setFormArray(function (oldFormArray) {
      return oldFormArray.filter(function (n) {
        return n !== name;
      });
    });
    formMapRef.current.delete(name);
    formDataRef.current.delete(name);
  }, []);
  useImperativeHandle(propsFormMapRef, function () {
    return formArrayRef.current;
  });
  useImperativeHandle(formRef, function () {
    var _formArrayRef$current;

    return (_formArrayRef$current = formArrayRef.current[step || 0]) === null || _formArrayRef$current === void 0 ? void 0 : _formArrayRef$current.current;
  }, [step]);
  /**
   * ProForm处理了一下 from 的数据，在其中做了一些操作 如果使用 Provider 自带的，自带的数据处理就无法生效了
   */

  var onFormFinish = useCallback( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name, formData) {
      var values, success;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              formDataRef.current.set(name, formData); // 如果不是最后一步

              if (!(!lastStep || !onFinish)) {
                _context.next = 3;
                break;
              }

              return _context.abrupt("return");

            case 3:
              setLoading(true);
              values = merge.apply(void 0, [{}].concat(_toConsumableArray(Array.from(formDataRef.current.values()))));
              _context.prev = 5;
              _context.next = 8;
              return onFinish(values);

            case 8:
              success = _context.sent;

              if (success) {
                setStep(0);
                formArrayRef.current.forEach(function (form) {
                  var _form$current;

                  return (_form$current = form.current) === null || _form$current === void 0 ? void 0 : _form$current.resetFields();
                });
              }

              _context.next = 15;
              break;

            case 12:
              _context.prev = 12;
              _context.t0 = _context["catch"](5);
              console.log(_context.t0);

            case 15:
              _context.prev = 15;
              setLoading(false);
              return _context.finish(15);

            case 18:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[5, 12, 15, 18]]);
    }));

    return function (_x, _x2) {
      return _ref3.apply(this, arguments);
    };
  }(), [lastStep, onFinish, setLoading, setStep]);
  var stepsDom = useMemo(function () {
    return _jsx("div", {
      className: "".concat(prefixCls, "-steps-container"),
      style: {
        maxWidth: Math.min(formArray.length * 320, 1160)
      },
      children: _jsx(_Steps, _objectSpread(_objectSpread({}, stepsProps), {}, {
        current: step,
        onChange: undefined,
        children: formArray.map(function (item) {
          var itemProps = formMapRef.current.get(item);
          return _jsx(_Steps.Step, _objectSpread({
            title: itemProps === null || itemProps === void 0 ? void 0 : itemProps.title
          }, itemProps === null || itemProps === void 0 ? void 0 : itemProps.stepProps), item);
        })
      }))
    });
  }, [formArray, prefixCls, step, stepsProps]);
  var onSubmit = useRefFunction(function () {
    var _from$current;

    var from = formArrayRef.current[step];
    (_from$current = from.current) === null || _from$current === void 0 ? void 0 : _from$current.submit();
  });
  /** 上一页功能 */

  var prePage = useRefFunction(function () {
    if (step < 1) return;
    setStep(step - 1);
  });
  var next = useMemo(function () {
    return submitter !== false && _jsx(_Button, _objectSpread(_objectSpread({
      type: "primary",
      loading: loading
    }, submitter === null || submitter === void 0 ? void 0 : submitter.submitButtonProps), {}, {
      onClick: function onClick() {
        var _submitter$onSubmit;

        submitter === null || submitter === void 0 ? void 0 : (_submitter$onSubmit = submitter.onSubmit) === null || _submitter$onSubmit === void 0 ? void 0 : _submitter$onSubmit.call(submitter);
        onSubmit();
      },
      children: intl.getMessage('stepsForm.next', '下一步')
    }), "next");
  }, [intl, loading, onSubmit, submitter]);
  var pre = useMemo(function () {
    return submitter !== false && _jsx(_Button, _objectSpread(_objectSpread({}, submitter === null || submitter === void 0 ? void 0 : submitter.resetButtonProps), {}, {
      onClick: function onClick() {
        var _submitter$onReset;

        prePage();
        submitter === null || submitter === void 0 ? void 0 : (_submitter$onReset = submitter.onReset) === null || _submitter$onReset === void 0 ? void 0 : _submitter$onReset.call(submitter);
      },
      children: intl.getMessage('stepsForm.prev', '上一步')
    }), "pre");
  }, [intl, prePage, submitter]);
  var submit = useMemo(function () {
    return submitter !== false && _jsx(_Button, _objectSpread(_objectSpread({
      type: "primary",
      loading: loading
    }, submitter === null || submitter === void 0 ? void 0 : submitter.submitButtonProps), {}, {
      onClick: function onClick() {
        var _submitter$onSubmit2;

        submitter === null || submitter === void 0 ? void 0 : (_submitter$onSubmit2 = submitter.onSubmit) === null || _submitter$onSubmit2 === void 0 ? void 0 : _submitter$onSubmit2.call(submitter);
        onSubmit();
      },
      children: intl.getMessage('stepsForm.submit', '提交')
    }), "submit");
  }, [intl, loading, onSubmit, submitter]);
  var nextPage = useRefFunction(function () {
    if (step > formArray.length - 2) return;
    setStep(step + 1);
  });
  var submitterDom = useMemo(function () {
    var buttons = [];
    var index = step || 0;

    if (index < 1) {
      buttons.push(next);
    } else if (index + 1 === formArray.length) {
      buttons.push(pre, submit);
    } else {
      buttons.push(pre, next);
    }

    buttons = buttons.filter(React.isValidElement);

    if (submitter && submitter.render) {
      var _formArrayRef$current2;

      var submitterProps = {
        form: (_formArrayRef$current2 = formArrayRef.current[step]) === null || _formArrayRef$current2 === void 0 ? void 0 : _formArrayRef$current2.current,
        onSubmit: onSubmit,
        step: step,
        onPre: prePage
      };
      return submitter.render(submitterProps, buttons);
    }

    if (submitter && (submitter === null || submitter === void 0 ? void 0 : submitter.render) === false) {
      return null;
    }

    return buttons;
  }, [formArray.length, next, onSubmit, pre, prePage, step, submit, submitter]);
  var formDom = useMemo(function () {
    return toArray(props.children).map(function (item, index) {
      var itemProps = item.props;
      var name = itemProps.name || "".concat(index);
      /** 是否是当前的表单 */

      var isShow = step === index;
      var config = isShow ? {
        contentRender: stepFormRender,
        submitter: false
      } : {};
      return _jsx("div", {
        className: classNames("".concat(prefixCls, "-step"), _defineProperty({}, "".concat(prefixCls, "-step-active"), isShow)),
        children: /*#__PURE__*/React.cloneElement(item, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, config), formProps), itemProps), {}, {
          name: name,
          step: index,
          key: name
        }))
      }, name);
    });
  }, [formProps, prefixCls, props.children, step, stepFormRender]);
  var finalStepsDom = useMemo(function () {
    if (stepsRender) {
      return stepsRender(formArray.map(function (item) {
        var _formMapRef$current$g;

        return {
          key: item,
          title: (_formMapRef$current$g = formMapRef.current.get(item)) === null || _formMapRef$current$g === void 0 ? void 0 : _formMapRef$current$g.title
        };
      }), stepsDom);
    }

    return stepsDom;
  }, [formArray, stepsDom, stepsRender]);
  var formContainer = useMemo(function () {
    return _jsxs("div", {
      className: "".concat(prefixCls, "-container"),
      style: containerStyle,
      children: [formDom, stepsFormRender ? null : _jsx(_Space, {
        children: submitterDom
      })]
    });
  }, [containerStyle, formDom, prefixCls, stepsFormRender, submitterDom]);
  var stepsFormDom = useMemo(function () {
    var doms = {
      stepsDom: finalStepsDom,
      formDom: formContainer
    };

    if (stepsFormRender) {
      return stepsFormRender(layoutRender(doms), submitterDom);
    }

    return layoutRender(doms);
  }, [finalStepsDom, formContainer, layoutRender, stepsFormRender, submitterDom]);
  return _jsx("div", {
    className: prefixCls,
    children: _jsx(_Form.Provider, _objectSpread(_objectSpread({}, rest), {}, {
      children: _jsx(StepsFormProvide.Provider, {
        value: {
          loading: loading,
          setLoading: setLoading,
          regForm: regForm,
          keyArray: formArray,
          next: nextPage,
          formArrayRef: formArrayRef,
          formMapRef: formMapRef,
          lastStep: lastStep,
          unRegForm: unRegForm,
          onFormFinish: onFormFinish
        },
        children: stepsFormDom
      })
    }))
  });
}

function StepsFormWarp(props) {
  return _jsx(ConfigProviderWrap, {
    children: _jsx(StepsForm, _objectSpread({}, props))
  });
}

StepsFormWarp.StepForm = StepForm;
StepsFormWarp.useForm = _Form.useForm;
export { StepsFormWarp as StepsForm };
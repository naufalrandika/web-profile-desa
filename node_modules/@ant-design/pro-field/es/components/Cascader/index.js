import "antd/es/cascader/style";
import _Cascader from "antd/es/cascader";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["radioType", "renderFormItem", "mode", "render", "label", "light"];
import { Fragment as _Fragment, jsx as _jsx } from "react/jsx-runtime";
import { LoadingOutlined } from '@ant-design/icons';
import { useIntl } from '@ant-design/pro-provider';
import { FieldLabel } from '@ant-design/pro-utils';
import classNames from 'classnames';
import React, { useContext, useImperativeHandle, useMemo, useRef, useState } from 'react';
import { ObjToMap, proFieldParsingText, useFieldFetchData } from '../Select';
/**
 * 级联选择组件
 *
 * @param param0
 * @param ref
 */

var FieldCascader = function FieldCascader(_ref, ref) {
  var _rest$fieldProps2;

  var radioType = _ref.radioType,
      renderFormItem = _ref.renderFormItem,
      mode = _ref.mode,
      render = _ref.render,
      label = _ref.label,
      light = _ref.light,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useContext = useContext(_ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var layoutClassName = getPrefixCls('pro-field-cascader');

  var _useFieldFetchData = useFieldFetchData(rest),
      _useFieldFetchData2 = _slicedToArray(_useFieldFetchData, 3),
      loading = _useFieldFetchData2[0],
      options = _useFieldFetchData2[1],
      _fetchData = _useFieldFetchData2[2];

  var intl = useIntl();
  var cascaderRef = useRef();
  var size = useContext(_ConfigProvider.SizeContext);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];

  useImperativeHandle(ref, function () {
    return _objectSpread(_objectSpread({}, cascaderRef.current || {}), {}, {
      fetchData: function fetchData() {
        return _fetchData();
      }
    });
  });
  var optionsValueEnum = useMemo(function () {
    var _rest$fieldProps;

    if (mode !== 'read') return;
    /**
     * Support cascader fieldNames
     *
     * @see https://ant.design/components/cascader-cn/#header
     */

    var _ref2 = ((_rest$fieldProps = rest.fieldProps) === null || _rest$fieldProps === void 0 ? void 0 : _rest$fieldProps.fieldNames) || {},
        _ref2$value = _ref2.value,
        valuePropsName = _ref2$value === void 0 ? 'value' : _ref2$value,
        _ref2$label = _ref2.label,
        labelPropsName = _ref2$label === void 0 ? 'label' : _ref2$label,
        _ref2$children = _ref2.children,
        childrenPropsName = _ref2$children === void 0 ? 'children' : _ref2$children;

    var valuesMap = new Map();

    var traverseOptions = function traverseOptions(_options) {
      if (!(_options === null || _options === void 0 ? void 0 : _options.length)) {
        return valuesMap;
      }

      var length = _options.length;
      var i = 0;

      while (i < length) {
        var cur = _options[i++];
        valuesMap.set(cur[valuePropsName], cur[labelPropsName]);
        traverseOptions(cur[childrenPropsName]);
      }

      return valuesMap;
    };

    return traverseOptions(options);
  }, [mode, options, (_rest$fieldProps2 = rest.fieldProps) === null || _rest$fieldProps2 === void 0 ? void 0 : _rest$fieldProps2.fieldNames]);

  if (mode === 'read') {
    var dom = _jsx(_Fragment, {
      children: proFieldParsingText(rest.text, ObjToMap(rest.valueEnum || optionsValueEnum))
    });

    if (render) {
      return render(rest.text, _objectSpread({
        mode: mode
      }, rest.fieldProps), dom) || null;
    }

    return dom;
  }

  if (mode === 'edit') {
    var _rest$fieldProps3;

    var _dom = _jsx(_Cascader, _objectSpread(_objectSpread({
      bordered: !light,
      ref: cascaderRef,
      open: open,
      onDropdownVisibleChange: setOpen,
      suffixIcon: loading ? _jsx(LoadingOutlined, {}) : light ? null : undefined,
      placeholder: intl.getMessage('tableForm.selectPlaceholder', '请选择'),
      allowClear: light ? false : undefined
    }, rest.fieldProps), {}, {
      className: classNames((_rest$fieldProps3 = rest.fieldProps) === null || _rest$fieldProps3 === void 0 ? void 0 : _rest$fieldProps3.className, layoutClassName),
      options: options
    }));

    if (renderFormItem) {
      _dom = renderFormItem(rest.text, _objectSpread({
        mode: mode
      }, rest.fieldProps), _dom) || null;
    }

    if (light) {
      var _rest$fieldProps4 = rest.fieldProps,
          disabled = _rest$fieldProps4.disabled,
          allowClear = _rest$fieldProps4.allowClear,
          placeholder = _rest$fieldProps4.placeholder;
      return _jsx(FieldLabel, {
        label: label,
        disabled: disabled,
        placeholder: placeholder,
        size: size,
        allowClear: allowClear,
        bordered: rest.bordered,
        value: _dom,
        onLabelClick: function onLabelClick() {
          return setOpen(!open);
        },
        onClear: function onClear() {
          var _rest$fieldProps5, _rest$fieldProps5$onC;

          return (_rest$fieldProps5 = rest.fieldProps) === null || _rest$fieldProps5 === void 0 ? void 0 : (_rest$fieldProps5$onC = _rest$fieldProps5.onChange) === null || _rest$fieldProps5$onC === void 0 ? void 0 : _rest$fieldProps5$onC.call(_rest$fieldProps5, undefined, undefined, {});
        }
      });
    }

    return _dom;
  }

  return null;
};

export default /*#__PURE__*/React.forwardRef(FieldCascader);
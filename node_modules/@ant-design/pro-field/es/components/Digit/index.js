import "antd/es/input-number/style";
import _InputNumber from "antd/es/input-number";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { jsx as _jsx } from "react/jsx-runtime";
import React, { useCallback } from 'react';
import omit from 'omit.js';
/**
 * 数字组件
 *
 * @param FieldDigitProps {
 *     text: number;
 *     moneySymbol?: string; }
 */

var FieldDigit = function FieldDigit(_ref, ref) {
  var text = _ref.text,
      type = _ref.mode,
      render = _ref.render,
      placeholder = _ref.placeholder,
      renderFormItem = _ref.renderFormItem,
      fieldProps = _ref.fieldProps;
  var proxyChange = useCallback(function (value) {
    var _fieldProps$onChange;

    var val = value !== null && value !== void 0 ? value : undefined;

    if (typeof value === 'string') {
      val = Number(val);
    }

    if (typeof val === 'number') {
      if (fieldProps.precision) {
        var _val, _val$toFixed, _fieldProps$precision;

        val = (_val = val) === null || _val === void 0 ? void 0 : (_val$toFixed = _val.toFixed) === null || _val$toFixed === void 0 ? void 0 : _val$toFixed.call(_val, (_fieldProps$precision = fieldProps.precision) !== null && _fieldProps$precision !== void 0 ? _fieldProps$precision : 0);
      }

      val = Number(val);
    }

    return fieldProps === null || fieldProps === void 0 ? void 0 : (_fieldProps$onChange = fieldProps.onChange) === null || _fieldProps$onChange === void 0 ? void 0 : _fieldProps$onChange.call(fieldProps, val);
  }, [fieldProps]);

  if (type === 'read') {
    var _fieldProps$formatter;

    var fractionDigits = {};

    if (fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.precision) {
      fractionDigits = {
        minimumFractionDigits: Number(fieldProps.precision),
        maximumFractionDigits: Number(fieldProps.precision)
      };
    }

    var digit = new Intl.NumberFormat(undefined, _objectSpread(_objectSpread({}, fractionDigits), (fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.intlProps) || {})).format(Number(text));

    var dom = _jsx("span", {
      ref: ref,
      children: (fieldProps === null || fieldProps === void 0 ? void 0 : (_fieldProps$formatter = fieldProps.formatter) === null || _fieldProps$formatter === void 0 ? void 0 : _fieldProps$formatter.call(fieldProps, digit)) || digit
    });

    if (render) {
      return render(text, _objectSpread({
        mode: type
      }, fieldProps), dom);
    }

    return dom;
  }

  if (type === 'edit' || type === 'update') {
    var _dom = _jsx(_InputNumber, _objectSpread(_objectSpread({
      ref: ref,
      min: 0,
      placeholder: placeholder
    }, omit(fieldProps, ['onChange'])), {}, {
      onChange: proxyChange
    }));

    if (renderFormItem) {
      return renderFormItem(text, _objectSpread({
        mode: type
      }, fieldProps), _dom);
    }

    return _dom;
  }

  return null;
};

export default /*#__PURE__*/React.forwardRef(FieldDigit);
import "antd/es/date-picker/style";
import _DatePicker from "antd/es/date-picker";
import "antd/es/time-picker/style";
import _TimePicker from "antd/es/time-picker";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { FieldLabel, parseValueToMoment } from '@ant-design/pro-utils';
import moment from 'moment';
import React, { useContext, useState } from 'react';
/**
 * 时间选择组件
 *
 * @param
 */

var FieldTimePicker = function FieldTimePicker(_ref, ref) {
  var text = _ref.text,
      mode = _ref.mode,
      light = _ref.light,
      label = _ref.label,
      format = _ref.format,
      render = _ref.render,
      renderFormItem = _ref.renderFormItem,
      plain = _ref.plain,
      fieldProps = _ref.fieldProps,
      lightLabel = _ref.lightLabel,
      labelTrigger = _ref.labelTrigger;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];

  var size = useContext(_ConfigProvider.SizeContext);

  var _useContext = useContext(_ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = getPrefixCls('pro-field-date-picker');
  var finalFormat = (fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.format) || format || 'HH:mm:ss';
  var isNumberOrMoment = moment.isMoment(text) || typeof text === 'number';

  if (mode === 'read') {
    var dom = _jsx("span", {
      ref: ref,
      children: text ? moment(text, isNumberOrMoment ? undefined : finalFormat).format(finalFormat) : '-'
    });

    if (render) {
      return render(text, _objectSpread({
        mode: mode
      }, fieldProps), _jsx("span", {
        children: dom
      }));
    }

    return dom;
  }

  if (mode === 'edit' || mode === 'update') {
    var _dom;

    var disabled = fieldProps.disabled,
        _onChange = fieldProps.onChange,
        placeholder = fieldProps.placeholder,
        allowClear = fieldProps.allowClear,
        value = fieldProps.value;
    var momentValue = parseValueToMoment(value, finalFormat);

    if (light) {
      var valueStr = momentValue && momentValue.format(finalFormat) || '';
      _dom = _jsxs("div", {
        className: "".concat(prefixCls, "-light"),
        onClick: function onClick(e) {
          var _lightLabel$current, _lightLabel$current$l, _lightLabel$current$l2;

          // 点击label切换下拉菜单
          var isLabelClick = lightLabel === null || lightLabel === void 0 ? void 0 : (_lightLabel$current = lightLabel.current) === null || _lightLabel$current === void 0 ? void 0 : (_lightLabel$current$l = _lightLabel$current.labelRef) === null || _lightLabel$current$l === void 0 ? void 0 : (_lightLabel$current$l2 = _lightLabel$current$l.current) === null || _lightLabel$current$l2 === void 0 ? void 0 : _lightLabel$current$l2.contains(e.target);

          if (isLabelClick) {
            setOpen(!open);
          } else {
            setOpen(true);
          }
        },
        children: [_jsx(_TimePicker, _objectSpread(_objectSpread({
          value: momentValue,
          format: format,
          ref: ref
        }, fieldProps), {}, {
          onChange: function onChange(v) {
            _onChange === null || _onChange === void 0 ? void 0 : _onChange(v);
            setTimeout(function () {
              setOpen(false);
            }, 0);
          },
          onOpenChange: function onOpenChange(isOpen) {
            if (!labelTrigger) {
              setOpen(isOpen);
            }
          },
          open: open
        })), _jsx(FieldLabel, {
          label: label,
          disabled: disabled,
          placeholder: placeholder,
          size: size,
          value: valueStr,
          allowClear: allowClear,
          onClear: function onClear() {
            return _onChange === null || _onChange === void 0 ? void 0 : _onChange(null);
          },
          expanded: open,
          ref: lightLabel
        })]
      });
    } else {
      _dom = _jsx(_DatePicker.TimePicker, _objectSpread(_objectSpread({
        ref: ref,
        format: format,
        bordered: plain === undefined ? true : !plain
      }, fieldProps), {}, {
        value: momentValue
      }));
    }

    if (renderFormItem) {
      return renderFormItem(text, _objectSpread({
        mode: mode
      }, fieldProps), _dom);
    }

    return _dom;
  }

  return null;
};
/**
 * 时间区间选择
 *
 * @param param0
 * @param ref
 */


var FieldTimeRangePicker = function FieldTimeRangePicker(_ref2) {
  var text = _ref2.text,
      mode = _ref2.mode,
      format = _ref2.format,
      render = _ref2.render,
      renderFormItem = _ref2.renderFormItem,
      plain = _ref2.plain,
      fieldProps = _ref2.fieldProps;
  var finalFormat = (fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.format) || format || 'HH:mm:ss';

  var _ref3 = Array.isArray(text) ? text : [],
      _ref4 = _slicedToArray(_ref3, 2),
      startText = _ref4[0],
      endText = _ref4[1];

  var startTextIsNumberOrMoment = moment.isMoment(startText) || typeof startText === 'number';
  var endTextIsNumberOrMoment = moment.isMoment(endText) || typeof endText === 'number';
  var parsedStartText = startText ? moment(startText, startTextIsNumberOrMoment ? undefined : finalFormat).format(finalFormat) : '';
  var parsedEndText = endText ? moment(endText, endTextIsNumberOrMoment ? undefined : finalFormat).format(finalFormat) : '';

  if (mode === 'read') {
    var dom = _jsxs("div", {
      children: [_jsx("div", {
        children: parsedStartText || '-'
      }), _jsx("div", {
        children: parsedEndText || '-'
      })]
    });

    if (render) {
      return render(text, _objectSpread({
        mode: mode
      }, fieldProps), _jsx("span", {
        children: dom
      }));
    }

    return dom;
  }

  if (mode === 'edit' || mode === 'update') {
    var value = fieldProps.value;
    var momentValue = parseValueToMoment(value, finalFormat);

    var _dom2 = _jsx(_TimePicker.RangePicker, _objectSpread(_objectSpread({
      format: format,
      bordered: plain === undefined ? true : !plain
    }, fieldProps), {}, {
      value: momentValue
    }));

    if (renderFormItem) {
      return renderFormItem(text, _objectSpread({
        mode: mode
      }, fieldProps), _dom2);
    }

    return _dom2;
  }

  return null;
};

export { FieldTimeRangePicker };
export default /*#__PURE__*/React.forwardRef(FieldTimePicker);
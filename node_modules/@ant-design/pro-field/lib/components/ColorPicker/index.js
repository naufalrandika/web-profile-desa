"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DEFAULT_COLORS = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

require("antd/lib/popover/style");

var _popover = _interopRequireDefault(require("antd/lib/popover"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

require("antd/lib/config-provider/style");

var _configProvider = _interopRequireDefault(require("antd/lib/config-provider"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _jsxRuntime = require("react/jsx-runtime");

var _sketchColor = require("@chenshuai2144/sketch-color");

var _useMergedState3 = _interopRequireDefault(require("rc-util/lib/hooks/useMergedState"));

var _react = require("react");

var _excluded = ["mode", "popoverProps"];
var DEFAULT_COLORS = ['#FF9D4E', '#5BD8A6', '#5B8FF9', '#F7664E', '#FF86B7', '#2B9E9D', '#9270CA', '#6DC8EC', '#667796', '#F6BD16' // 9 - 黄色
];
exports.DEFAULT_COLORS = DEFAULT_COLORS;

var ColorPicker = function ColorPicker(_ref) {
  var mode = _ref.mode,
      popoverProps = _ref.popoverProps,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _useContext = (0, _react.useContext)(_configProvider.default.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = getPrefixCls('pro-field-color-picker');

  var _useMergedState = (0, _useMergedState3.default)('#1890ff', {
    value: rest.value,
    onChange: rest.onChange
  }),
      _useMergedState2 = (0, _slicedToArray2.default)(_useMergedState, 2),
      color = _useMergedState2[0],
      setColor = _useMergedState2[1];

  var readDom = (0, _jsxRuntime.jsx)("div", {
    className: prefixCls,
    style: {
      padding: 5,
      width: 48,
      border: '1px solid #ddd',
      borderRadius: '2px',
      cursor: 'pointer'
    },
    children: (0, _jsxRuntime.jsx)("div", {
      style: {
        backgroundColor: color,
        width: 36,
        height: 14,
        borderRadius: '2px'
      }
    })
  });

  if (mode === 'read') {
    return readDom;
  }

  return (0, _jsxRuntime.jsx)(_popover.default, (0, _objectSpread2.default)((0, _objectSpread2.default)({
    trigger: "click",
    placement: "right"
  }, popoverProps), {}, {
    content: (0, _jsxRuntime.jsx)("div", {
      style: {
        margin: '-12px -16px'
      },
      children: (0, _jsxRuntime.jsx)(_sketchColor.SketchPicker, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, rest), {}, {
        presetColors: rest.colors || rest.presetColors || DEFAULT_COLORS,
        color: color,
        onChange: function onChange(_ref2) {
          var hex = _ref2.hex,
              _ref2$rgb = _ref2.rgb,
              r = _ref2$rgb.r,
              g = _ref2$rgb.g,
              b = _ref2$rgb.b,
              a = _ref2$rgb.a;

          if (a && a < 1) {
            setColor("rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(a, ")"));
            return;
          }

          setColor(hex);
        }
      }))
    }),
    children: readDom
  }));
};
/**
 * 颜色组件
 *
 * @param FieldColorPicker {
 *     text: number;
 *     moneySymbol?: string; }
 */


var FieldColorPicker = function FieldColorPicker(_ref3) {
  var text = _ref3.text,
      type = _ref3.mode,
      render = _ref3.render,
      renderFormItem = _ref3.renderFormItem,
      fieldProps = _ref3.fieldProps;

  if (type === 'read') {
    var dom = (0, _jsxRuntime.jsx)(ColorPicker, {
      value: text,
      mode: "read"
    });

    if (render) {
      return render(text, (0, _objectSpread2.default)({
        mode: type
      }, fieldProps), dom);
    }

    return dom;
  }

  if (type === 'edit' || type === 'update') {
    var _dom = (0, _jsxRuntime.jsx)(ColorPicker, (0, _objectSpread2.default)({}, fieldProps));

    if (renderFormItem) {
      return renderFormItem(text, (0, _objectSpread2.default)({
        mode: type
      }, fieldProps), _dom);
    }

    return _dom;
  }

  return null;
};

var _default = FieldColorPicker;
exports.default = _default;
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("antd/lib/date-picker/style");

var _datePicker = _interopRequireDefault(require("antd/lib/date-picker"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

require("antd/lib/config-provider/style");

var _configProvider = _interopRequireDefault(require("antd/lib/config-provider"));

var _jsxRuntime = require("react/jsx-runtime");

var _proProvider = require("@ant-design/pro-provider");

var _proUtils = require("@ant-design/pro-utils");

var _moment = _interopRequireDefault(require("moment"));

var _react = _interopRequireWildcard(require("react"));

require("./index.less");

var formatDate = function formatDate(text, format) {
  if (!text) {
    return '-';
  }

  if (typeof format === 'function') {
    return format((0, _moment.default)(text));
  } else {
    return (0, _moment.default)(text).format(format || 'YYYY-MM-DD');
  }
};
/**
 * 日期选择组件
 *
 * @param
 */


var FieldDatePicker = function FieldDatePicker(_ref, ref) {
  var text = _ref.text,
      mode = _ref.mode,
      format = _ref.format,
      label = _ref.label,
      light = _ref.light,
      render = _ref.render,
      renderFormItem = _ref.renderFormItem,
      plain = _ref.plain,
      showTime = _ref.showTime,
      fieldProps = _ref.fieldProps,
      picker = _ref.picker,
      bordered = _ref.bordered,
      lightLabel = _ref.lightLabel,
      labelTrigger = _ref.labelTrigger;
  var intl = (0, _proProvider.useIntl)();
  var size = (0, _react.useContext)(_configProvider.default.SizeContext);

  var _useContext = (0, _react.useContext)(_configProvider.default.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = getPrefixCls('pro-field-date-picker');

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];

  if (mode === 'read') {
    var dom = formatDate(text, fieldProps.format || format);

    if (render) {
      return render(text, (0, _objectSpread2.default)({
        mode: mode
      }, fieldProps), (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: dom
      }));
    }

    return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
      children: dom
    });
  }

  if (mode === 'edit' || mode === 'update') {
    var _dom;

    var disabled = fieldProps.disabled,
        value = fieldProps.value,
        _onChange = fieldProps.onChange,
        allowClear = fieldProps.allowClear,
        _fieldProps$placehold = fieldProps.placeholder,
        placeholder = _fieldProps$placehold === void 0 ? intl.getMessage('tableForm.selectPlaceholder', '请选择') : _fieldProps$placehold;
    var momentValue = (0, _proUtils.parseValueToMoment)(value);

    if (light) {
      var valueStr = momentValue && momentValue.format(format) || '';
      _dom = (0, _jsxRuntime.jsxs)("div", {
        className: "".concat(prefixCls, "-light"),
        onClick: function onClick(e) {
          var _lightLabel$current, _lightLabel$current$l, _lightLabel$current$l2;

          // 点击label切换下拉菜单
          var isLabelClick = lightLabel === null || lightLabel === void 0 ? void 0 : (_lightLabel$current = lightLabel.current) === null || _lightLabel$current === void 0 ? void 0 : (_lightLabel$current$l = _lightLabel$current.labelRef) === null || _lightLabel$current$l === void 0 ? void 0 : (_lightLabel$current$l2 = _lightLabel$current$l.current) === null || _lightLabel$current$l2 === void 0 ? void 0 : _lightLabel$current$l2.contains(e.target);

          if (isLabelClick) {
            setOpen(!open);
          } else {
            setOpen(true);
          }
        },
        children: [(0, _jsxRuntime.jsx)(_datePicker.default, (0, _objectSpread2.default)((0, _objectSpread2.default)({
          picker: picker,
          showTime: showTime,
          format: format,
          ref: ref
        }, fieldProps), {}, {
          value: momentValue,
          onChange: function onChange(v) {
            _onChange === null || _onChange === void 0 ? void 0 : _onChange(v);
            setTimeout(function () {
              setOpen(false);
            }, 0);
          },
          onOpenChange: function onOpenChange(isOpen) {
            if (!labelTrigger) {
              setOpen(isOpen);
            }
          },
          open: open
        })), (0, _jsxRuntime.jsx)(_proUtils.FieldLabel, {
          label: label,
          disabled: disabled,
          placeholder: placeholder,
          size: size,
          value: valueStr,
          onClear: function onClear() {
            _onChange === null || _onChange === void 0 ? void 0 : _onChange(null);
          },
          allowClear: allowClear,
          bordered: bordered,
          expanded: open,
          ref: lightLabel
        })]
      });
    } else {
      _dom = (0, _jsxRuntime.jsx)(_datePicker.default, (0, _objectSpread2.default)((0, _objectSpread2.default)({
        picker: picker,
        showTime: showTime,
        format: format,
        placeholder: placeholder,
        bordered: plain === undefined ? true : !plain,
        ref: ref
      }, fieldProps), {}, {
        value: momentValue
      }));
    }

    if (renderFormItem) {
      return renderFormItem(text, (0, _objectSpread2.default)({
        mode: mode
      }, fieldProps), _dom);
    }

    return _dom;
  }

  return null;
};

var _default = /*#__PURE__*/_react.default.forwardRef(FieldDatePicker);

exports.default = _default;
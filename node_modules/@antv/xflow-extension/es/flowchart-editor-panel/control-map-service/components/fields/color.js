import React, { useState, useRef, memo } from 'react';
import { createPortal } from 'react-dom';
import { useXFlowApp } from '@antv/xflow-core';
import { Button } from 'antd';
import { SketchPicker } from 'react-color';
import { PREFIX } from '../constants';
const ColorPicker = props => {
    const { label, value = '', onChange, getContainer } = props;
    const [show, setShow] = useState(false);
    const colorRef = useRef(value);
    const containerRef = useRef();
    const { graphProvider } = useXFlowApp();
    const graphConfig = useRef();
    graphProvider.getGraphOptions().then(x6GraphConfig => {
        graphConfig.current = x6GraphConfig;
    });
    const PickContainer = () => {
        return (React.createElement("div", { className: `${PREFIX}-pick-color-container` },
            React.createElement("div", { className: `${PREFIX}-popover` },
                React.createElement(SketchPicker, { onChange: color => {
                        colorRef.current = color.hex;
                    } }),
                React.createElement("div", { className: "foolter" },
                    React.createElement(Button, { onClick: () => {
                            setShow(false);
                        } }, "\u53D6\u6D88"),
                    React.createElement(Button, { type: "primary", onClick: () => {
                            onChange === null || onChange === void 0 ? void 0 : onChange(colorRef.current);
                            setShow(false);
                        } }, "\u786E\u8BA4")))));
    };
    const getParentContainerByClassName = (currentEle, className) => {
        const containers = document.getElementsByClassName(className);
        if (containers.length === 1) {
            return containers[0];
        }
        let container = null;
        let currentNode = currentEle.parentElement;
        while (!container) {
            const current = currentNode.getElementsByClassName(className);
            if ((current === null || current === void 0 ? void 0 : current.length) > 0) {
                container = current[0];
            }
            currentNode = currentNode.parentElement;
        }
        return container;
    };
    const createPickColorContainer = () => {
        var _a;
        const container = (_a = getContainer === null || getContainer === void 0 ? void 0 : getContainer()) !== null && _a !== void 0 ? _a : getParentContainerByClassName(containerRef.current, 'flowchart-editor-panel-body');
        return createPortal(React.createElement(PickContainer, null), container);
    };
    return (React.createElement("div", { className: "group", ref: containerRef },
        label && React.createElement("label", null, label),
        React.createElement("div", { className: `${PREFIX}-color-container`, onClick: () => {
                setShow(true);
            } },
            React.createElement("div", { className: `${PREFIX}-color`, style: {
                    backgroundColor: value,
                    height: '100%',
                } })),
        show && createPickColorContainer()));
};
export default memo(ColorPicker, (pre, next) => {
    return pre.label === next.label && pre.value === next.value;
});
//# sourceMappingURL=color.js.map
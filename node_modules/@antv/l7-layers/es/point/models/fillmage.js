import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { AttributeType, gl } from '@antv/l7-core';
import { getCullFace } from '@antv/l7-utils';
import BaseModel from "../../core/BaseModel";
import { SizeUnitType } from "../../core/interface";
import { PointFillTriangulation } from "../../core/triangulation";
// static pointLayer shader - not support animate
/* babel-plugin-inline-import '../shaders/image/fillImage_frag.glsl' */
var pointFillFrag = "uniform sampler2D u_texture;\nuniform vec2 u_textSize;\nuniform float u_opacity : 1;\n\n#pragma include \"sdf_2d\"\n#pragma include \"picking\"\nvarying vec2 v_uv; // \u672C\u8EAB\u7684 uv \u5750\u6807\nvarying vec2 v_Iconuv;\n\nvoid main() {\n\n  vec2 pos = v_Iconuv / u_textSize + v_uv / u_textSize * 64.;\n  gl_FragColor = texture2D(u_texture, pos);\n  gl_FragColor.a *= u_opacity;\n\n  gl_FragColor = filterColor(gl_FragColor);\n}\n";
/* babel-plugin-inline-import '../shaders/image/fillImage_vert.glsl' */
var pointFillVert = "attribute vec4 a_Color;\nattribute vec3 a_Position;\nattribute vec3 a_Extrude;\nattribute float a_Size;\nattribute vec2 a_Uv;\nattribute float a_Rotate;\n\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_Mvp;\nuniform mat2 u_RotateMatrix;\nuniform int u_size_unit;\n\nvarying vec2 v_uv; // \u672C\u8EAB\u7684 uv \u5750\u6807\nvarying vec2 v_Iconuv; // icon \u8D34\u56FE\u7684 uv \u5750\u6807\n\nuniform float u_raisingHeight: 0.0;\nuniform float u_heightfixed: 0.0;\nuniform float u_opacity : 1;\nuniform vec2 u_offsets;\n\n\n\n#pragma include \"projection\"\n#pragma include \"picking\"\n\nvoid main() {\n  vec3 extrude = a_Extrude;\n  v_uv = (a_Extrude.xy + 1.0)/2.0;\n  v_uv.y = 1.0 - v_uv.y;\n  v_Iconuv = a_Uv;\n\n\n  highp float angle_sin = sin(a_Rotate);\n  highp float angle_cos = cos(a_Rotate);\n  mat2 rotation_matrix = mat2(angle_cos, -1.0 * angle_sin, angle_sin, angle_cos);\n  float newSize = a_Size;\n  if(u_size_unit == 1) {\n    newSize = newSize  * u_PixelsPerMeter.z;\n  }\n\n  // vec2 offset = (u_RotateMatrix * extrude.xy * (a_Size) + textrueOffsets);\n  vec2 offset = (rotation_matrix * u_RotateMatrix * extrude.xy * (newSize) + u_offsets);\n  vec3 aPosition = a_Position;\n\n  offset = project_pixel(offset);\n\n  vec4 project_pos = project_position(vec4(aPosition.xy, 0.0, 1.0));\n  float raisingHeight = u_raisingHeight;\n  if(u_heightfixed < 1.0) { // height fixed\n    raisingHeight = project_pixel(u_raisingHeight);\n  } else {\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT || u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET) {\n      float mapboxZoomScale = 4.0/pow(2.0, 21.0 - u_Zoom);\n      raisingHeight = u_raisingHeight * mapboxZoomScale;\n    }\n  }\n\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n    gl_Position = u_Mvp *vec4(project_pos.xy + offset, raisingHeight, 1.0);\n  } else {\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, raisingHeight, 1.0));\n  }\n \n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, 0.0, 1.0));\n\n  setPickingColor(a_PickingColor);\n}\n";
var FillImageModel = /*#__PURE__*/function (_BaseModel) {
  _inherits(FillImageModel, _BaseModel);
  var _super = _createSuper(FillImageModel);
  function FillImageModel() {
    var _this;
    _classCallCheck(this, FillImageModel);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "meter2coord", 1);
    _defineProperty(_assertThisInitialized(_this), "isMeter", false);
    _defineProperty(_assertThisInitialized(_this), "radian", 0);
    _defineProperty(_assertThisInitialized(_this), "updateTexture", function () {
      var createTexture2D = _this.rendererService.createTexture2D;
      if (_this.texture) {
        _this.texture.update({
          data: _this.iconService.getCanvas(),
          mag: 'linear',
          min: 'linear mipmap nearest',
          mipmap: true
        });
        // 更新完纹理后在更新的图层的时候需要更新所有的图层
        _this.layerService.throttleRenderLayers();
        return;
      }
      _this.texture = createTexture2D({
        data: _this.iconService.getCanvas(),
        mag: gl.LINEAR,
        min: gl.LINEAR_MIPMAP_LINEAR,
        premultiplyAlpha: false,
        width: 1024,
        height: _this.iconService.canvasHeight || 128,
        mipmap: true
      });
    });
    return _this;
  }
  _createClass(FillImageModel, [{
    key: "getUninforms",
    value:
    // 旋转的弧度
    function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
        _ref$opacity = _ref.opacity,
        opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,
        _ref$offsets = _ref.offsets,
        offsets = _ref$offsets === void 0 ? [0, 0] : _ref$offsets,
        rotation = _ref.rotation,
        _ref$raisingHeight = _ref.raisingHeight,
        raisingHeight = _ref$raisingHeight === void 0 ? 0.0 : _ref$raisingHeight,
        _ref$heightfixed = _ref.heightfixed,
        heightfixed = _ref$heightfixed === void 0 ? false : _ref$heightfixed,
        _ref$unit = _ref.unit,
        unit = _ref$unit === void 0 ? 'pixel' : _ref$unit;
      if (this.rendererService.getDirty()) {
        this.texture.bind();
      }
      /**
       *               rotateFlag
       * DEFAULT          1
       * MAPBOX           1
       * GAODE2.x         -1
       * GAODE1.x         -1
       */
      var rotateFlag = 1;
      if (this.mapService.version === 'GAODE2.x' || this.mapService.version === 'GAODE1.x') {
        rotateFlag = -1;
      }
      // 控制图标的旋转角度（绕 Z 轴旋转）
      this.radian = rotation !== undefined ? rotateFlag * Math.PI * rotation / 180 : rotateFlag * Math.PI * (this.mapService.getRotation() % 360) / 180;
      return {
        u_raisingHeight: Number(raisingHeight),
        u_heightfixed: Number(heightfixed),
        u_size_unit: SizeUnitType[unit],
        u_RotateMatrix: new Float32Array([Math.cos(this.radian), Math.sin(this.radian), -Math.sin(this.radian), Math.cos(this.radian)]),
        u_texture: this.texture,
        u_textSize: [1024, this.iconService.canvasHeight || 128],
        u_opacity: opacity,
        u_offsets: offsets
      };
    }
  }, {
    key: "getAttribute",
    value: function getAttribute() {
      return this.styleAttributeService.createAttributesAndIndices(this.layer.getEncodedData(), PointFillTriangulation);
    }
  }, {
    key: "initModels",
    value: function () {
      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.iconService.on('imageUpdate', this.updateTexture);
              this.updateTexture();
              return _context.abrupt("return", this.buildModels());
            case 3:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function initModels() {
        return _initModels.apply(this, arguments);
      }
      return initModels;
    }()
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var model;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.layer.buildLayerModel({
                moduleName: 'pointFillImage',
                vertexShader: pointFillVert,
                fragmentShader: pointFillFrag,
                triangulation: PointFillTriangulation,
                depth: {
                  enable: false
                },
                cull: {
                  enable: true,
                  face: getCullFace(this.mapService.version)
                }
              });
            case 2:
              model = _context2.sent;
              return _context2.abrupt("return", [model]);
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function buildModels() {
        return _buildModels.apply(this, arguments);
      }
      return buildModels;
    }()
  }, {
    key: "clearModels",
    value: function clearModels() {
      var _this$texture;
      this.iconService.off('imageUpdate', this.updateTexture);
      (_this$texture = this.texture) === null || _this$texture === void 0 ? void 0 : _this$texture.destroy();
    }

    // overwrite baseModel func
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      var _this2 = this;
      this.styleAttributeService.registerStyleAttribute({
        name: 'rotate',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Rotate',
          buffer: {
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 1,
          update: function update(feature) {
            var _feature$rotate = feature.rotate,
              rotate = _feature$rotate === void 0 ? 0 : _feature$rotate;
            return Array.isArray(rotate) ? [rotate[0]] : [rotate];
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'uv',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Uv',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 2,
          update: function update(feature) {
            var iconMap = _this2.iconService.getIconMap();
            var shape = feature.shape;
            var _ref2 = iconMap[shape] || {
                x: -64,
                y: -64
              },
              x = _ref2.x,
              y = _ref2.y;
            return [x, y];
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'extrude',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Extrude',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            var extrude = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0];
            var extrudeIndex = attributeIdx % 4 * 3;
            return [extrude[extrudeIndex], extrude[extrudeIndex + 1], extrude[extrudeIndex + 2]];
          }
        }
      });

      // point layer size;
      this.styleAttributeService.registerStyleAttribute({
        name: 'size',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Size',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 1,
          update: function update(feature) {
            var _feature$size = feature.size,
              size = _feature$size === void 0 ? 5 : _feature$size;
            return Array.isArray(size) ? [size[0]] : [size];
          }
        }
      });
    }
  }]);
  return FillImageModel;
}(BaseModel);
export { FillImageModel as default };
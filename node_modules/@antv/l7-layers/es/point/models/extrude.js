import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { AttributeType, gl } from '@antv/l7-core';
import { calculateCentroid, getCullFace, rgb2arr } from '@antv/l7-utils';
import BaseModel from "../../core/BaseModel";
import { PointExtrudeTriangulation } from "../../core/triangulation";
/* babel-plugin-inline-import '../shaders/extrude/extrude_frag.glsl' */
var pointExtrudeFrag = "varying vec4 v_color;\nvarying float v_lightWeight;\nuniform float u_pickLight: 0.0;\n\n#pragma include \"picking\"\n\n\nvoid main() {\n\n  gl_FragColor = v_color;\n  // \u5F00\u542F\u900F\u660E\u5EA6\u6E10\u53D8\n  // picking\n  if(u_pickLight > 0.0) {\n    gl_FragColor = filterColorAlpha(gl_FragColor, v_lightWeight);\n  } else {\n    gl_FragColor = filterColor(gl_FragColor);\n  }\n}\n";
/* babel-plugin-inline-import '../shaders/extrude/extrude_vert.glsl' */
var pointExtrudeVert = "precision highp float;\n\n#define pi 3.1415926535\n#define ambientRatio 0.5\n#define diffuseRatio 0.3\n#define specularRatio 0.2\n\nattribute vec3 a_Position;\nattribute vec3 a_Pos;\nattribute vec4 a_Color;\nattribute vec3 a_Size;\nattribute vec3 a_Normal;\n\nuniform float u_heightfixed: 0.0; // \u9ED8\u8BA4\u4E0D\u56FA\u5B9A\nuniform float u_r;\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_Mvp;\nvarying vec4 v_color;\nvarying float v_lightWeight;\nvarying float v_barLinearZ;\n\nuniform float u_opacity : 1;\nuniform float u_lightEnable: 1;\nuniform float u_opacitylinear: 0.0;\nuniform vec4 u_sourceColor;\nuniform vec4 u_targetColor;\nuniform float u_opacitylinear_dir: 1.0;\nuniform float  u_linearColor: 0.0;\n\n\n#pragma include \"projection\"\n#pragma include \"light\"\n#pragma include \"picking\"\n\nfloat getYRadian(float x, float z) {\n  if(x > 0.0 && z > 0.0) {\n    return atan(x/z);\n  } else if(x > 0.0 && z <= 0.0){\n    return atan(-z/x) + pi/2.0;\n  } else if(x <= 0.0 && z <= 0.0) {\n    return  pi + atan(x/z); //atan(x/z) + \n  } else {\n    return atan(z/-x) + pi*3.0/2.0;\n  }\n}\n\nfloat getXRadian(float y, float r) {\n  return atan(y/r);\n}\n\nvoid main() {\n\n\n  vec3 size = a_Size * a_Position;\n\n  vec3 offset = size; // \u63A7\u5236\u5706\u67F1\u4F53\u7684\u5927\u5C0F - \u4ECE\u6807\u51C6\u5355\u4F4D\u5706\u67F1\u4F53\u8FDB\u884C\u504F\u79FB\n\n  if(u_heightfixed < 1.0) { // \u5706\u67F1\u4F53\u4E0D\u56FA\u5B9A\u9AD8\u5EA6\n    \n    if (u_CoordinateSystem == COORDINATE_SYSTEM_P20 || u_CoordinateSystem == COORDINATE_SYSTEM_P20_OFFSET) {\n      // P20 \u5750\u6807\u7CFB\u4E0B\uFF0C\u4E3A\u4E86\u548C Web \u58A8\u5361\u6258\u5750\u6807\u7CFB\u7EDF\u4E00\uFF0Czoom \u9ED8\u8BA4\u51CF1\n      offset = offset * pow(2.0, (19.0 - u_Zoom));\n    }\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) {\n      // P20_2 \u5750\u6807\u7CFB\u4E0B\uFF0C\u4E3A\u4E86\u548C Web \u58A8\u5361\u6258\u5750\u6807\u7CFB\u7EDF\u4E00\uFF0Czoom \u9ED8\u8BA4\u51CF3\n      offset = offset * pow(2.0, (19.0 - 3.0 - u_Zoom));\n    }\n  } else {// \u5706\u67F1\u4F53\u56FA\u5B9A\u9AD8\u5EA6 \uFF08 \u5904\u7406 mapbox \uFF09\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT || u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET) {\n      offset *= 4.0/pow(2.0, 21.0 - u_Zoom);\n    }\n  }\n\n\n  vec4 project_pos = project_position(vec4(a_Pos.xy, 0., 1.0));\n\n  // u_r \u63A7\u5236\u5706\u67F1\u7684\u751F\u957F\n  vec4 pos = vec4(project_pos.xy + offset.xy, offset.z * u_r, 1.0);\n\n  // // \u5706\u67F1\u5149\u7167\u6548\u679C\n  float lightWeight = 1.0;\n\n  if(u_lightEnable > 0.0) { // \u53D6\u6D88\u4E09\u5143\u8868\u8FBE\u5F0F\uFF0C\u589E\u5F3A\u5065\u58EE\u6027\n    lightWeight = calc_lighting(pos);\n  }\n\n  v_lightWeight = lightWeight;\n\n  v_color = a_Color;\n\n    // \u8BBE\u7F6E\u5706\u67F1\u7684\u5E95\u8272\n  if(u_linearColor == 1.0) { // \u4F7F\u7528\u6E10\u53D8\u989C\u8272\n    v_color = mix(u_sourceColor, u_targetColor, a_Position.z);\n    v_color.a =  v_color.a * u_opacity;\n  } else {\n    v_color = vec4(a_Color.rgb * lightWeight, a_Color.w * u_opacity);\n  }\n\n    if(u_opacitylinear > 0.0) {\n    v_color.a *= u_opacitylinear_dir > 0.0 ? (1.0 - a_Position.z): a_Position.z;\n  }\n\n\n  // gl_Position = project_common_position_to_clipspace(pos);\n\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n    gl_Position = u_Mvp * pos;\n  } else {\n    gl_Position = project_common_position_to_clipspace(pos);\n  }\n\n  setPickingColor(a_PickingColor);\n}\n";
var ExtrudeModel = /*#__PURE__*/function (_BaseModel) {
  _inherits(ExtrudeModel, _BaseModel);
  var _super = _createSuper(ExtrudeModel);
  function ExtrudeModel() {
    var _this;
    _classCallCheck(this, ExtrudeModel);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "raiseCount", 0);
    _defineProperty(_assertThisInitialized(_this), "raiseRepeat", 0);
    return _this;
  }
  _createClass(ExtrudeModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
        _ref$animateOption = _ref.animateOption,
        animateOption = _ref$animateOption === void 0 ? {
          enable: false,
          speed: 0.01,
          repeat: false
        } : _ref$animateOption,
        _ref$opacity = _ref.opacity,
        opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,
        sourceColor = _ref.sourceColor,
        targetColor = _ref.targetColor,
        _ref$pickLight = _ref.pickLight,
        pickLight = _ref$pickLight === void 0 ? false : _ref$pickLight,
        _ref$heightfixed = _ref.heightfixed,
        heightfixed = _ref$heightfixed === void 0 ? false : _ref$heightfixed,
        _ref$opacityLinear = _ref.opacityLinear,
        opacityLinear = _ref$opacityLinear === void 0 ? {
          enable: false,
          dir: 'up'
        } : _ref$opacityLinear,
        _ref$lightEnable = _ref.lightEnable,
        lightEnable = _ref$lightEnable === void 0 ? true : _ref$lightEnable;

      // 转化渐变色
      var useLinearColor = 0; // 默认不生效
      var sourceColorArr = [0, 0, 0, 0];
      var targetColorArr = [0, 0, 0, 0];
      if (sourceColor && targetColor) {
        sourceColorArr = rgb2arr(sourceColor);
        targetColorArr = rgb2arr(targetColor);
        useLinearColor = 1;
      }
      if (this.raiseCount < 1 && this.raiseRepeat > 0) {
        if (animateOption.enable) {
          var _animateOption$speed = animateOption.speed,
            speed = _animateOption$speed === void 0 ? 0.01 : _animateOption$speed;
          this.raiseCount += speed;
          if (this.raiseCount >= 1) {
            if (this.raiseRepeat > 1) {
              this.raiseCount = 0;
              this.raiseRepeat--;
            } else {
              this.raiseCount = 1;
            }
          }
        }
      }
      return {
        // 圆柱体的拾取高亮是否要计算光照
        u_pickLight: Number(pickLight),
        // 圆柱体是否固定高度
        u_heightfixed: Number(heightfixed),
        u_r: animateOption.enable && this.raiseRepeat > 0 ? this.raiseCount : 1.0,
        u_opacity: opacity,
        // 渐变色支持参数
        u_linearColor: useLinearColor,
        u_sourceColor: sourceColorArr,
        u_targetColor: targetColorArr,
        // 透明度渐变
        u_opacitylinear: Number(opacityLinear.enable),
        u_opacitylinear_dir: opacityLinear.dir === 'up' ? 1.0 : 0.0,
        // 光照计算开关
        u_lightEnable: Number(lightEnable)
      };
    }
  }, {
    key: "initModels",
    value: function () {
      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this.buildModels());
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function initModels() {
        return _initModels.apply(this, arguments);
      }
      return initModels;
    }()
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _ref2, _ref2$depth, depth, _ref2$animateOption$r, repeat, model;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              // GAODE1.x GAODE2.x MAPBOX
              _ref2 = this.layer.getLayerConfig(), _ref2$depth = _ref2.depth, depth = _ref2$depth === void 0 ? true : _ref2$depth, _ref2$animateOption$r = _ref2.animateOption.repeat, repeat = _ref2$animateOption$r === void 0 ? 1 : _ref2$animateOption$r;
              this.raiseRepeat = repeat;
              _context2.next = 4;
              return this.layer.buildLayerModel({
                moduleName: 'pointExtrude',
                vertexShader: pointExtrudeVert,
                fragmentShader: pointExtrudeFrag,
                triangulation: PointExtrudeTriangulation,
                cull: {
                  enable: true,
                  face: getCullFace(this.mapService.version)
                },
                depth: {
                  enable: depth
                }
              });
            case 4:
              model = _context2.sent;
              return _context2.abrupt("return", [model]);
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function buildModels() {
        return _buildModels.apply(this, arguments);
      }
      return buildModels;
    }()
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      // point layer size;
      this.styleAttributeService.registerStyleAttribute({
        name: 'size',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Size',
          buffer: {
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 3,
          update: function update(feature) {
            var size = feature.size;
            if (size) {
              var buffersize = [];
              if (Array.isArray(size)) {
                buffersize = size.length === 2 ? [size[0], size[0], size[1]] : size;
              }
              if (!Array.isArray(size)) {
                buffersize = [size, size, size];
              }
              return buffersize;
            } else {
              return [2, 2, 2];
            }
          }
        }
      });

      // point layer size;
      this.styleAttributeService.registerStyleAttribute({
        name: 'normal',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Normal',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {
            return normal;
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'pos',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Pos',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 3,
          update: function update(feature) {
            var coordinates = calculateCentroid(feature.coordinates);
            return [coordinates[0], coordinates[1], 0];
          }
        }
      });
    }
  }]);
  return ExtrudeModel;
}(BaseModel);
export { ExtrudeModel as default };
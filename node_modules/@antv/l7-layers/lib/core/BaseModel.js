"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));
var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));
var _l7Core = require("@antv/l7-core");
var _l7Utils = require("@antv/l7-utils");
var _blend = require("../utils/blend");
var _stencil = require("../utils/stencil");
var _CommonStyleAttribute = require("./CommonStyleAttribute");
var _dec, _class, _descriptor;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var BaseModel = (_dec = (0, _l7Core.lazyInject)(_l7Core.TYPES.IGlobalConfigService), (_class = /*#__PURE__*/function () {
  // style texture data mapping

  // style texture data mapping

  function BaseModel(layer) {
    (0, _classCallCheck2.default)(this, BaseModel);
    (0, _defineProperty2.default)(this, "preStyleAttribute", {});
    (0, _defineProperty2.default)(this, "encodeStyleAttribute", {});
    (0, _initializerDefineProperty2.default)(this, "configService", _descriptor, this);
    this.layer = layer;
    this.rendererService = layer.getContainer().get(_l7Core.TYPES.IRendererService);
    this.pickingService = layer.getContainer().get(_l7Core.TYPES.IPickingService);
    this.shaderModuleService = layer.getContainer().get(_l7Core.TYPES.IShaderModuleService);
    this.styleAttributeService = layer.getContainer().get(_l7Core.TYPES.IStyleAttributeService);
    this.mapService = layer.getContainer().get(_l7Core.TYPES.IMapService);
    this.iconService = layer.getContainer().get(_l7Core.TYPES.IIconService);
    this.fontService = layer.getContainer().get(_l7Core.TYPES.IFontService);
    this.cameraService = layer.getContainer().get(_l7Core.TYPES.ICameraService);
    this.layerService = layer.getContainer().get(_l7Core.TYPES.ILayerService);
    // 初始化支持数据映射的 Style 属性

    this.registerStyleAttribute();
    // 注册 Attribute
    this.registerBuiltinAttributes();
    // 开启动画
    this.startModelAnimate();
    var createTexture2D = this.rendererService.createTexture2D;
    this.createTexture2D = createTexture2D;
  }

  // style datatexture mapping
  (0, _createClass2.default)(BaseModel, [{
    key: "getBlend",
    value: function getBlend() {
      var _this$layer$getLayerC = this.layer.getLayerConfig(),
        _this$layer$getLayerC2 = _this$layer$getLayerC.blend,
        blend = _this$layer$getLayerC2 === void 0 ? 'normal' : _this$layer$getLayerC2;
      return _blend.BlendTypes[_l7Core.BlendType[blend]];
    }
  }, {
    key: "getStencil",
    value: function getStencil(option) {
      var _this$layer$getLayerC3 = this.layer.getLayerConfig(),
        _this$layer$getLayerC4 = _this$layer$getLayerC3.mask,
        mask = _this$layer$getLayerC4 === void 0 ? false : _this$layer$getLayerC4,
        _this$layer$getLayerC5 = _this$layer$getLayerC3.maskInside,
        maskInside = _this$layer$getLayerC5 === void 0 ? true : _this$layer$getLayerC5,
        enableMask = _this$layer$getLayerC3.enableMask,
        _this$layer$getLayerC6 = _this$layer$getLayerC3.maskOperation,
        maskOperation = _this$layer$getLayerC6 === void 0 ? _l7Core.MaskOperation.AND : _this$layer$getLayerC6;
      // TODO 临时处理，后期移除MaskLayer
      if (this.layer.type === 'MaskLayer') {
        return (0, _stencil.getStencilMask)({
          isStencil: true,
          stencilType: _l7Core.StencilType.SINGLE
        }); // 用于遮罩的stencil 参数
      }

      if (option.isStencil) {
        return (0, _stencil.getStencilMask)((0, _objectSpread2.default)((0, _objectSpread2.default)({}, option), {}, {
          maskOperation: maskOperation
        })); // 用于遮罩的stencil 参数
      }

      var maskflag = mask ||
      //  mask 兼容历史写法
      enableMask && this.layer.masks.length !== 0 ||
      // 外部图层的mask
      this.layer.tileMask !== undefined; // 瓦片图层
      // !!(mask || enableMask || this.layer.tileMask);
      return (0, _stencil.getStencil)(maskflag, maskInside);
    }
  }, {
    key: "getDefaultStyle",
    value: function getDefaultStyle() {
      return {};
    }
  }, {
    key: "getUninforms",
    value: function getUninforms() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "getAnimateUniforms",
    value: function getAnimateUniforms() {
      return {};
    }
  }, {
    key: "needUpdate",
    value: function () {
      var _needUpdate = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", false);
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function needUpdate() {
        return _needUpdate.apply(this, arguments);
      }
      return needUpdate;
    }() // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              throw new Error('Method not implemented.');
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function buildModels() {
        return _buildModels.apply(this, arguments);
      }
      return buildModels;
    }() // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "initModels",
    value: function () {
      var _initModels = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              throw new Error('Method not implemented.');
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function initModels() {
        return _initModels.apply(this, arguments);
      }
      return initModels;
    }() // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "clearModels",
    value: function clearModels() {
      var refresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      return;
    }
  }, {
    key: "getAttribute",
    value: function getAttribute() {
      throw new Error('Method not implemented.');
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "render",
    value: function render(renderOptions) {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "animateOption2Array",
    value: function animateOption2Array(option) {
      return [option.enable ? 0 : 1.0, option.duration || 4.0, option.interval || 0.2, option.trailLength || 0.1];
    }
  }, {
    key: "startModelAnimate",
    value: function startModelAnimate() {
      var _ref = this.layer.getLayerConfig(),
        animateOption = _ref.animateOption;
      if (animateOption.enable) {
        this.layer.setAnimateStartTime();
      }
    }
  }, {
    key: "getInject",
    value: function getInject() {
      var encodeStyleAttribute = this.layer.encodeStyleAttribute;
      var str = '';
      var attrType = {
        opacity: 'float',
        stroke: 'vec4',
        offsets: 'vec2',
        textOffset: 'vec2'
      };
      this.layer.enableShaderEncodeStyles.forEach(function (key) {
        if (encodeStyleAttribute[key]) {
          str += "#define USE_ATTRIBUTE_".concat(key.toUpperCase(), " 0.0; \n\n");
        }
        str += "\n          #ifdef USE_ATTRIBUTE_".concat(key.toUpperCase(), "\n      attribute ").concat(attrType[key], " a_").concat(key.charAt(0).toUpperCase() + key.slice(1), ";\n    #else\n      uniform ").concat(attrType[key], " u_").concat(key, ";\n    #endif\n\n    ");
      });
      var innerStr = '';
      this.layer.enableShaderEncodeStyles.forEach(function (key) {
        innerStr += "\n\n#ifdef USE_ATTRIBUTE_".concat(key.toUpperCase(), "\n  ").concat(attrType[key], " ").concat(key, "  = a_").concat(key.charAt(0).toUpperCase() + key.slice(1), ";\n#else\n  ").concat(attrType[key], " ").concat(key, " = u_").concat(key, ";\n#endif\n\n");
      });
      return {
        'vs:#decl': str,
        'vs:#main-start': innerStr
      };
    }

    // 获取数据映射样式
  }, {
    key: "getStyleAttribute",
    value: function getStyleAttribute() {
      var _this = this;
      var options = {};
      // TODO: 优化

      var defualtValue = {
        opacity: 1,
        stroke: [1, 0, 0, 1],
        offsets: [0, 0]
      };
      this.layer.enableShaderEncodeStyles.forEach(function (key) {
        if (!_this.layer.encodeStyleAttribute[key]) {
          // @ts-ignore
          var keyValue = _this.layer.getLayerConfig()[key];
          var value = typeof keyValue === 'undefined' ? defualtValue[key] : keyValue;
          if (key === 'stroke') {
            value = (0, _l7Utils.rgb2arr)(value);
          }
          options['u_' + key] = value;
        }
      });
      return options;
    }
    // 注册数据映射样式
  }, {
    key: "registerStyleAttribute",
    value: function registerStyleAttribute() {
      var _this2 = this;
      Object.keys(this.layer.encodeStyleAttribute).forEach(function (key) {
        var options = (0, _CommonStyleAttribute.getCommonStyleAttributeOptions)(key);
        if (options) {
          _this2.styleAttributeService.registerStyleAttribute(options);
        }
      });
    }
  }, {
    key: "updateEncodeAttribute",
    value: function updateEncodeAttribute(type, flag) {
      this.encodeStyleAttribute[type] = flag;
    }
  }]);
  return BaseModel;
}(), (_descriptor = (0, _applyDecoratedDescriptor2.default)(_class.prototype, "configService", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class));
exports.default = BaseModel;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _l7Core = require("@antv/l7-core");
var _l7Utils = require("@antv/l7-utils");
var _BaseModel2 = _interopRequireDefault(require("../../core/BaseModel"));
var _interface = require("../../core/interface");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/* babel-plugin-inline-import '../shaders/animate/wave_frag.glsl' */
// animate pointLayer shader - support animate
var waveFillFrag = "\nuniform float u_additive;\n\n\nvarying vec4 v_data;\nvarying vec4 v_color;\nvarying float v_radius;\nuniform float u_time;\nuniform vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\n\n#pragma include \"sdf_2d\"\n#pragma include \"picking\"\n\nvoid main() {\n\n  lowp float antialiasblur = v_data.z;\n  float r = v_radius / (v_radius);\n\n  float outer_df;\n  float inner_df;\n  // 'circle', 'triangle', 'square', 'pentagon', 'hexagon', 'octogon', 'hexagram', 'rhombus', 'vesica'\n  \n  outer_df = sdCircle(v_data.xy, 1.0);\n  inner_df = sdCircle(v_data.xy, r);\n\n\n  float opacity_t = smoothstep(0.0, antialiasblur, outer_df);\n\n  float color_t = smoothstep(\n    antialiasblur,\n    0.0,\n    inner_df\n  );\n  float PI = 3.14159;\n  float N_RINGS = 3.0;\n  float FREQ = 1.0;\n\n  gl_FragColor = v_color;\n\n  float d = length(v_data.xy);\n  if(d > 0.5) {\n    discard;\n  }\n  float intensity = clamp(cos(d * PI), 0.0, 1.0) * clamp(cos(2.0 * PI * (d * 2.0 * u_animate.z - u_animate.y * u_time)), 0.0, 1.0);\n  \n  // \u6839\u636E\u53E0\u52A0\u6A21\u5F0F\u9009\u62E9\u6548\u679C\n  if(u_additive > 0.0) {\n    gl_FragColor *= intensity;\n    // \u4F18\u5316\u6C34\u6CE2\u70B9 blend additive \u6A21\u5F0F\u4E0B\u6709\u7684\u62FE\u53D6\u6548\u679C \n    gl_FragColor = filterColorAlpha(gl_FragColor, gl_FragColor.a);\n  } else {\n    gl_FragColor = vec4(gl_FragColor.xyz, gl_FragColor.a * intensity);\n    gl_FragColor = filterColor(gl_FragColor);\n  }\n}\n"; // static pointLayer shader - not support animate
/* babel-plugin-inline-import '../shaders/fill_frag.glsl' */
var pointFillFrag = "uniform float u_additive;\nuniform float u_stroke_opacity : 1;\nuniform float u_stroke_width : 2;\n\nvarying vec4 v_data;\nvarying vec4 v_color;\nvarying float v_radius;\nvarying vec4 v_stroke;\n\n\n#pragma include \"sdf_2d\"\n#pragma include \"picking\"\n\n\nvoid main() {\n  int shape = int(floor(v_data.w + 0.5));\n  lowp float antialiasblur = v_data.z;\n  float r = v_radius / (v_radius + u_stroke_width);\n\n  float outer_df;\n  float inner_df;\n  // 'circle', 'triangle', 'square', 'pentagon', 'hexagon', 'octogon', 'hexagram', 'rhombus', 'vesica'\n  if (shape == 0) {\n    outer_df = sdCircle(v_data.xy, 1.0);\n    inner_df = sdCircle(v_data.xy, r);\n  } else if (shape == 1) {\n    outer_df = sdEquilateralTriangle(1.1 * v_data.xy);\n    inner_df = sdEquilateralTriangle(1.1 / r * v_data.xy);\n  } else if (shape == 2) {\n    outer_df = sdBox(v_data.xy, vec2(1.));\n    inner_df = sdBox(v_data.xy, vec2(r));\n  } else if (shape == 3) {\n    outer_df = sdPentagon(v_data.xy, 0.8);\n    inner_df = sdPentagon(v_data.xy, r * 0.8);\n  } else if (shape == 4) {\n    outer_df = sdHexagon(v_data.xy, 0.8);\n    inner_df = sdHexagon(v_data.xy, r * 0.8);\n  } else if (shape == 5) {\n    outer_df = sdOctogon(v_data.xy, 1.0);\n    inner_df = sdOctogon(v_data.xy, r);\n  } else if (shape == 6) {\n    outer_df = sdHexagram(v_data.xy, 0.52);\n    inner_df = sdHexagram(v_data.xy, r * 0.52);\n  } else if (shape == 7) {\n    outer_df = sdRhombus(v_data.xy, vec2(1.0));\n    inner_df = sdRhombus(v_data.xy, vec2(r));\n  } else if (shape == 8) {\n    outer_df = sdVesica(v_data.xy, 1.1, 0.8);\n    inner_df = sdVesica(v_data.xy, r * 1.1, r * 0.8);\n  }\n\n  float opacity_t = smoothstep(0.0, antialiasblur, outer_df);\n\n  float color_t = u_stroke_width < 0.01 ? 0.0 : smoothstep(\n    antialiasblur,\n    0.0,\n    inner_df\n  );\n\n  if(u_stroke_width < 0.01) {\n    gl_FragColor = v_color;\n  } else {\n    gl_FragColor = mix(v_color, v_stroke * u_stroke_opacity, color_t);\n  }\n\n  if(u_additive > 0.0) {\n    gl_FragColor *= opacity_t;\n    gl_FragColor = filterColorAlpha(gl_FragColor, gl_FragColor.a);\n  } else {\n    gl_FragColor.a *= opacity_t;\n    gl_FragColor = filterColor(gl_FragColor);\n  }\n   // \u4F5C\u4E3A mask \u6A21\u677F\u65F6\u9700\u8981\u4E22\u5F03\u900F\u660E\u7684\u50CF\u7D20\n  if(gl_FragColor.a < 0.01) {\n    discard;\n  } \n}\n";
/* babel-plugin-inline-import '../shaders/fill_vert.glsl' */
var pointFillVert = "attribute vec4 a_Color;\nattribute vec3 a_Position;\nattribute vec3 a_Extrude;\nattribute float a_Size;\nattribute float a_Shape;\n\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_Mvp;\nuniform int u_size_unit;\n\nvarying vec4 v_data;\nvarying vec4 v_color;\nvarying float v_radius;\nvarying vec4 v_stroke;\n\n// uniform float u_opacity : 1;\nuniform float u_stroke_width: 2;\nuniform vec3 u_blur_height_fixed: [0, 0, 0];\n\n\n#pragma include \"projection\"\n#pragma include \"picking\"\n\n\nvoid main() {\n  // \u900F\u660E\u5EA6\u8BA1\u7B97\n  v_stroke = stroke;  \n  vec3 extrude = a_Extrude;\n  float shape_type = a_Shape;\n  /*\n  *  setPickingSize \u8BBE\u7F6E\u62FE\u53D6\u5927\u5C0F\n  *  u_meter2coord \u5728\u7B49\u9762\u79EF\u5927\u5C0F\u7684\u65F6\u5019\u8BBE\u7F6E\u5355\u4F4D\n  */\n  float newSize = setPickingSize(a_Size);\n  // float newSize = setPickingSize(a_Size) * 0.00001038445708445579;\n\n\n\n  // unpack color(vec2)\n  v_color = vec4(a_Color.xyz, a_Color.w * opacity);\n\n  if(u_size_unit == 1) {\n    newSize = newSize  * u_PixelsPerMeter.z;\n  }\n\n   v_radius = newSize;\n\n  // anti-alias\n  //  float antialiased_blur = -max(u_blur, antialiasblur);\n  float antialiasblur = -max(2.0 / u_DevicePixelRatio / newSize, u_blur_height_fixed.x);\n\n  vec2 offset = (extrude.xy * (newSize + u_stroke_width) + u_offsets);\n  vec3 aPosition = a_Position;\n\n  offset = project_pixel(offset);\n  \n  // TODP: /abs(extrude.x) \u662F\u4E3A\u4E86\u517C\u5BB9\u5730\u7403\u6A21\u5F0F\n  v_data = vec4(extrude.x/abs(extrude.x), extrude.y/abs(extrude.y), antialiasblur,shape_type);\n\n\n  // vec4 project_pos = project_position(vec4(a_Position.xy, 0.0, 1.0));\n  vec4 project_pos = project_position(vec4(aPosition.xy, 0.0, 1.0));\n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, project_pixel(setPickingOrder(0.0)), 1.0));\n\n  float raisingHeight = u_blur_height_fixed.y;\n\n  if(u_blur_height_fixed.z < 1.0) { // false\n    raisingHeight = project_pixel(u_blur_height_fixed.y);\n  } else {\n     if(u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT || u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET) {\n      float mapboxZoomScale = 4.0/pow(2.0, 21.0 - u_Zoom);\n      raisingHeight = u_blur_height_fixed.y * mapboxZoomScale;\n    }\n  }\n \n\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n    gl_Position =  u_Mvp * vec4(project_pos.xy + offset, raisingHeight, 1.0);\n  } else {\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, raisingHeight, 1.0));\n  }\n \n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, 0.0, 1.0));\n\n  setPickingColor(a_PickingColor);\n}\n";
var FillModel = /*#__PURE__*/function (_BaseModel) {
  (0, _inherits2.default)(FillModel, _BaseModel);
  var _super = _createSuper(FillModel);
  function FillModel() {
    (0, _classCallCheck2.default)(this, FillModel);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(FillModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
        _ref$strokeOpacity = _ref.strokeOpacity,
        strokeOpacity = _ref$strokeOpacity === void 0 ? 1 : _ref$strokeOpacity,
        _ref$strokeWidth = _ref.strokeWidth,
        strokeWidth = _ref$strokeWidth === void 0 ? 0 : _ref$strokeWidth,
        blend = _ref.blend,
        _ref$blur = _ref.blur,
        blur = _ref$blur === void 0 ? 0 : _ref$blur,
        _ref$raisingHeight = _ref.raisingHeight,
        raisingHeight = _ref$raisingHeight === void 0 ? 0 : _ref$raisingHeight,
        _ref$heightfixed = _ref.heightfixed,
        heightfixed = _ref$heightfixed === void 0 ? false : _ref$heightfixed,
        _ref$unit = _ref.unit,
        unit = _ref$unit === void 0 ? 'pixel' : _ref$unit;
      return (0, _objectSpread2.default)({
        u_blur_height_fixed: [blur, Number(raisingHeight), Number(heightfixed)],
        u_additive: blend === 'additive' ? 1.0 : 0.0,
        u_stroke_opacity: strokeOpacity,
        u_stroke_width: strokeWidth,
        u_size_unit: _interface.SizeUnitType[unit]
      }, this.getStyleAttribute());
    }
  }, {
    key: "getAnimateUniforms",
    value: function getAnimateUniforms() {
      var _ref2 = this.layer.getLayerConfig(),
        _ref2$animateOption = _ref2.animateOption,
        animateOption = _ref2$animateOption === void 0 ? {
          enable: false
        } : _ref2$animateOption;
      return {
        u_animate: this.animateOption2Array(animateOption),
        u_time: this.layer.getLayerAnimateTime()
      };
    }
  }, {
    key: "getAttribute",
    value: function getAttribute() {
      return this.styleAttributeService.createAttributesAndIndices(this.layer.getEncodedData(), _l7Utils.PointFillTriangulation);
    }
  }, {
    key: "initModels",
    value: function () {
      var _initModels = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this.buildModels());
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function initModels() {
        return _initModels.apply(this, arguments);
      }
      return initModels;
    }()
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var _ref3, _ref3$animateOption, animateOption, _this$getShaders, frag, vert, type, model;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _ref3 = this.layer.getLayerConfig(), _ref3$animateOption = _ref3.animateOption, animateOption = _ref3$animateOption === void 0 ? {
                enable: false
              } : _ref3$animateOption;
              _this$getShaders = this.getShaders(animateOption), frag = _this$getShaders.frag, vert = _this$getShaders.vert, type = _this$getShaders.type;
              this.layer.triangulation = _l7Utils.PointFillTriangulation;
              _context2.next = 5;
              return this.layer.buildLayerModel({
                moduleName: type,
                vertexShader: vert,
                fragmentShader: frag,
                inject: this.getInject(),
                triangulation: _l7Utils.PointFillTriangulation,
                depth: {
                  enable: false
                }
              });
            case 5:
              model = _context2.sent;
              return _context2.abrupt("return", [model]);
            case 7:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function buildModels() {
        return _buildModels.apply(this, arguments);
      }
      return buildModels;
    }()
    /**
     * 根据 animateOption 的值返回对应的 shader 代码
     * @returns
     */
  }, {
    key: "getShaders",
    value: function getShaders(animateOption) {
      if (animateOption.enable) {
        switch (animateOption.type) {
          case 'wave':
            return {
              frag: waveFillFrag,
              vert: pointFillVert,
              type: 'pointWave'
            };
          default:
            return {
              frag: waveFillFrag,
              vert: pointFillVert,
              type: 'pointWave'
            };
        }
      } else {
        return {
          frag: pointFillFrag,
          vert: pointFillVert,
          type: 'pointFill'
        };
      }
    }

    // overwrite baseModel func
  }, {
    key: "animateOption2Array",
    value: function animateOption2Array(option) {
      return [option.enable ? 0 : 1.0, option.speed || 1, option.rings || 3, 0];
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      // 注册 Style 参与数据映射的内置属性
      var shape2d = this.layer.getLayerConfig().shape2d;
      this.styleAttributeService.registerStyleAttribute({
        name: 'extrude',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Extrude',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            var extrude = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0];
            var extrudeIndex = attributeIdx % 4 * 3;
            return [extrude[extrudeIndex], extrude[extrudeIndex + 1], extrude[extrudeIndex + 2]];
          }
        }
      });

      // point layer size;
      this.styleAttributeService.registerStyleAttribute({
        name: 'size',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Size',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 1,
          update: function update(feature) {
            var _feature$size = feature.size,
              size = _feature$size === void 0 ? 5 : _feature$size;
            return Array.isArray(size) ? [size[0]] : [size];
          }
        }
      });

      // point layer shape;
      this.styleAttributeService.registerStyleAttribute({
        name: 'shape',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Shape',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 1,
          update: function update(feature) {
            var _feature$shape = feature.shape,
              shape = _feature$shape === void 0 ? 2 : _feature$shape;
            var shapeIndex = shape2d.indexOf(shape);
            return [shapeIndex];
          }
        }
      });
    }
  }]);
  return FillModel;
}(_BaseModel2.default);
exports.default = FillModel;